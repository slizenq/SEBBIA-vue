// // Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// // versions:
// //   protoc-gen-ts_proto  v1.181.2
// //   protoc               v4.25.4
// // source: assets/proto/vacancy.proto

// /* eslint-disable */
// import * as _m0 from "protobufjs/minimal";
// import { Timestamp } from "../../google/protobuf/timestamp";

// export const protobufPackage = "vacancy";

// /** Описание вакансии (без id, id будет только в ответах) */
// export interface Vacancy {
//   /** Ожидаемые навыки */
//   expectedSkills: Skill[];
//   /** Необязательное поле - о практике (макс 500 символов) */
//   aboutPractice: string;
//   /** Направления */
//   directions: Direction[];
//   /** О проектах (макс 500 символов, необязательное поле) */
//   aboutProjects: string;
//   /** UUID компании */
//   companyId: string;
// }

// export interface Skill {
//   /** Описание навыка, не более 30 символов */
//   skill: string;
// }

// export interface Direction {
//   /** Направление (выбор из списка) */
//   direction: string;
// }

// /** Команды для создания и обновления вакансии */
// export interface CreateVacancyRequest {
//   /** Данные вакансии (ID не передается, генерируется на сервере) */
//   vacancy: Vacancy | undefined;
// }

// export interface UpdateVacancyRequest {
//   /** ID вакансии (UUID) */
//   id: string;
//   /** Обновленные данные вакансии (ID не требуется) */
//   vacancy: Vacancy | undefined;
// }

// /** Ответы */
// export interface VacancyResponse {
//   /** ID вакансии (UUID, обязательное поле в ответах) */
//   id: string;
//   /** Данные вакансии */
//   vacancy: Vacancy | undefined;
// }

// export interface VacancyCreated {
//   /** ID вакансии (сгенерированный UUID) */
//   id: string;
//   /** Данные вакансии */
//   vacancy:
//     | Vacancy
//     | undefined;
//   /** Время создания */
//   timestamp: Date | undefined;
// }

// export interface VacancyUpdated {
//   /** ID вакансии (UUID вакансии) */
//   id: string;
//   /** Обновленные данные вакансии */
//   vacancy:
//     | Vacancy
//     | undefined;
//   /** Время обновления */
//   timestamp: Date | undefined;
// }

// /** Новый запрос на получение вакансии по ID */
// export interface GetVacancyByIdRequest {
//   /** VacancyId - UUID вакансии */
//   id: string;
// }

// /** Новый запрос на получение вакансий по параметрам (все поля опциональные) */
// export interface GetVacanciesByParamsRequest {
//   /** Фильтрация по навыкам */
//   expectedSkills: Skill[];
//   /** Фильтрация по описанию практики */
//   aboutPractice: string;
//   /** Фильтрация по направлениям */
//   directions: Direction[];
//   /** Фильтрация по компании */
//   companyId: string;
// }

// export interface GetVacanciesResponse {
//   /** Список найденных вакансий (с ID) */
//   vacancies: VacancyWithId[];
// }

// /** Вакансия с обязательным ID для ответа */
// export interface VacancyWithId {
//   /** ID вакансии (UUID) */
//   id: string;
//   /** Ожидаемые навыки */
//   expectedSkills: Skill[];
//   /** Необязательное поле - о практике (макс 500 символов) */
//   aboutPractice: string;
//   /** Направления */
//   directions: Direction[];
//   /** О проектах (макс 500 символов, необязательное поле) */
//   aboutProjects: string;
//   /** UUID компании */
//   companyId: string;
// }

// function createBaseVacancy(): Vacancy {
//   return { expectedSkills: [], aboutPractice: "", directions: [], aboutProjects: "", companyId: "" };
// }

// export const Vacancy = {
//   encode(message: Vacancy, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
//     for (const v of message.expectedSkills) {
//       Skill.encode(v!, writer.uint32(10).fork()).ldelim();
//     }
//     if (message.aboutPractice !== "") {
//       writer.uint32(18).string(message.aboutPractice);
//     }
//     for (const v of message.directions) {
//       Direction.encode(v!, writer.uint32(26).fork()).ldelim();
//     }
//     if (message.aboutProjects !== "") {
//       writer.uint32(34).string(message.aboutProjects);
//     }
//     if (message.companyId !== "") {
//       writer.uint32(42).string(message.companyId);
//     }
//     return writer;
//   },

//   decode(input: _m0.Reader | Uint8Array, length?: number): Vacancy {
//     const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
//     let end = length === undefined ? reader.len : reader.pos + length;
//     const message = createBaseVacancy();
//     while (reader.pos < end) {
//       const tag = reader.uint32();
//       switch (tag >>> 3) {
//         case 1:
//           if (tag !== 10) {
//             break;
//           }

//           message.expectedSkills.push(Skill.decode(reader, reader.uint32()));
//           continue;
//         case 2:
//           if (tag !== 18) {
//             break;
//           }

//           message.aboutPractice = reader.string();
//           continue;
//         case 3:
//           if (tag !== 26) {
//             break;
//           }

//           message.directions.push(Direction.decode(reader, reader.uint32()));
//           continue;
//         case 4:
//           if (tag !== 34) {
//             break;
//           }

//           message.aboutProjects = reader.string();
//           continue;
//         case 5:
//           if (tag !== 42) {
//             break;
//           }

//           message.companyId = reader.string();
//           continue;
//       }
//       if ((tag & 7) === 4 || tag === 0) {
//         break;
//       }
//       reader.skipType(tag & 7);
//     }
//     return message;
//   },

//   fromJSON(object: any): Vacancy {
//     return {
//       expectedSkills: globalThis.Array.isArray(object?.expectedSkills)
//         ? object.expectedSkills.map((e: any) => Skill.fromJSON(e))
//         : [],
//       aboutPractice: isSet(object.aboutPractice) ? globalThis.String(object.aboutPractice) : "",
//       directions: globalThis.Array.isArray(object?.directions)
//         ? object.directions.map((e: any) => Direction.fromJSON(e))
//         : [],
//       aboutProjects: isSet(object.aboutProjects) ? globalThis.String(object.aboutProjects) : "",
//       companyId: isSet(object.companyId) ? globalThis.String(object.companyId) : "",
//     };
//   },

//   toJSON(message: Vacancy): unknown {
//     const obj: any = {};
//     if (message.expectedSkills?.length) {
//       obj.expectedSkills = message.expectedSkills.map((e) => Skill.toJSON(e));
//     }
//     if (message.aboutPractice !== "") {
//       obj.aboutPractice = message.aboutPractice;
//     }
//     if (message.directions?.length) {
//       obj.directions = message.directions.map((e) => Direction.toJSON(e));
//     }
//     if (message.aboutProjects !== "") {
//       obj.aboutProjects = message.aboutProjects;
//     }
//     if (message.companyId !== "") {
//       obj.companyId = message.companyId;
//     }
//     return obj;
//   },

//   create<I extends Exact<DeepPartial<Vacancy>, I>>(base?: I): Vacancy {
//     return Vacancy.fromPartial(base ?? ({} as any));
//   },
//   fromPartial<I extends Exact<DeepPartial<Vacancy>, I>>(object: I): Vacancy {
//     const message = createBaseVacancy();
//     message.expectedSkills = object.expectedSkills?.map((e) => Skill.fromPartial(e)) || [];
//     message.aboutPractice = object.aboutPractice ?? "";
//     message.directions = object.directions?.map((e) => Direction.fromPartial(e)) || [];
//     message.aboutProjects = object.aboutProjects ?? "";
//     message.companyId = object.companyId ?? "";
//     return message;
//   },
// };

// function createBaseSkill(): Skill {
//   return { skill: "" };
// }

// export const Skill = {
//   encode(message: Skill, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
//     if (message.skill !== "") {
//       writer.uint32(10).string(message.skill);
//     }
//     return writer;
//   },

//   decode(input: _m0.Reader | Uint8Array, length?: number): Skill {
//     const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
//     let end = length === undefined ? reader.len : reader.pos + length;
//     const message = createBaseSkill();
//     while (reader.pos < end) {
//       const tag = reader.uint32();
//       switch (tag >>> 3) {
//         case 1:
//           if (tag !== 10) {
//             break;
//           }

//           message.skill = reader.string();
//           continue;
//       }
//       if ((tag & 7) === 4 || tag === 0) {
//         break;
//       }
//       reader.skipType(tag & 7);
//     }
//     return message;
//   },

//   fromJSON(object: any): Skill {
//     return { skill: isSet(object.skill) ? globalThis.String(object.skill) : "" };
//   },

//   toJSON(message: Skill): unknown {
//     const obj: any = {};
//     if (message.skill !== "") {
//       obj.skill = message.skill;
//     }
//     return obj;
//   },

//   create<I extends Exact<DeepPartial<Skill>, I>>(base?: I): Skill {
//     return Skill.fromPartial(base ?? ({} as any));
//   },
//   fromPartial<I extends Exact<DeepPartial<Skill>, I>>(object: I): Skill {
//     const message = createBaseSkill();
//     message.skill = object.skill ?? "";
//     return message;
//   },
// };

// function createBaseDirection(): Direction {
//   return { direction: "" };
// }

// export const Direction = {
//   encode(message: Direction, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
//     if (message.direction !== "") {
//       writer.uint32(10).string(message.direction);
//     }
//     return writer;
//   },

//   decode(input: _m0.Reader | Uint8Array, length?: number): Direction {
//     const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
//     let end = length === undefined ? reader.len : reader.pos + length;
//     const message = createBaseDirection();
//     while (reader.pos < end) {
//       const tag = reader.uint32();
//       switch (tag >>> 3) {
//         case 1:
//           if (tag !== 10) {
//             break;
//           }

//           message.direction = reader.string();
//           continue;
//       }
//       if ((tag & 7) === 4 || tag === 0) {
//         break;
//       }
//       reader.skipType(tag & 7);
//     }
//     return message;
//   },

//   fromJSON(object: any): Direction {
//     return { direction: isSet(object.direction) ? globalThis.String(object.direction) : "" };
//   },

//   toJSON(message: Direction): unknown {
//     const obj: any = {};
//     if (message.direction !== "") {
//       obj.direction = message.direction;
//     }
//     return obj;
//   },

//   create<I extends Exact<DeepPartial<Direction>, I>>(base?: I): Direction {
//     return Direction.fromPartial(base ?? ({} as any));
//   },
//   fromPartial<I extends Exact<DeepPartial<Direction>, I>>(object: I): Direction {
//     const message = createBaseDirection();
//     message.direction = object.direction ?? "";
//     return message;
//   },
// };

// function createBaseCreateVacancyRequest(): CreateVacancyRequest {
//   return { vacancy: undefined };
// }

// export const CreateVacancyRequest = {
//   encode(message: CreateVacancyRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
//     if (message.vacancy !== undefined) {
//       Vacancy.encode(message.vacancy, writer.uint32(10).fork()).ldelim();
//     }
//     return writer;
//   },

//   decode(input: _m0.Reader | Uint8Array, length?: number): CreateVacancyRequest {
//     const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
//     let end = length === undefined ? reader.len : reader.pos + length;
//     const message = createBaseCreateVacancyRequest();
//     while (reader.pos < end) {
//       const tag = reader.uint32();
//       switch (tag >>> 3) {
//         case 1:
//           if (tag !== 10) {
//             break;
//           }

//           message.vacancy = Vacancy.decode(reader, reader.uint32());
//           continue;
//       }
//       if ((tag & 7) === 4 || tag === 0) {
//         break;
//       }
//       reader.skipType(tag & 7);
//     }
//     return message;
//   },

//   fromJSON(object: any): CreateVacancyRequest {
//     return { vacancy: isSet(object.vacancy) ? Vacancy.fromJSON(object.vacancy) : undefined };
//   },

//   toJSON(message: CreateVacancyRequest): unknown {
//     const obj: any = {};
//     if (message.vacancy !== undefined) {
//       obj.vacancy = Vacancy.toJSON(message.vacancy);
//     }
//     return obj;
//   },

//   create<I extends Exact<DeepPartial<CreateVacancyRequest>, I>>(base?: I): CreateVacancyRequest {
//     return CreateVacancyRequest.fromPartial(base ?? ({} as any));
//   },
//   fromPartial<I extends Exact<DeepPartial<CreateVacancyRequest>, I>>(object: I): CreateVacancyRequest {
//     const message = createBaseCreateVacancyRequest();
//     message.vacancy = (object.vacancy !== undefined && object.vacancy !== null)
//       ? Vacancy.fromPartial(object.vacancy)
//       : undefined;
//     return message;
//   },
// };

// function createBaseUpdateVacancyRequest(): UpdateVacancyRequest {
//   return { id: "", vacancy: undefined };
// }

// export const UpdateVacancyRequest = {
//   encode(message: UpdateVacancyRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
//     if (message.id !== "") {
//       writer.uint32(10).string(message.id);
//     }
//     if (message.vacancy !== undefined) {
//       Vacancy.encode(message.vacancy, writer.uint32(18).fork()).ldelim();
//     }
//     return writer;
//   },

//   decode(input: _m0.Reader | Uint8Array, length?: number): UpdateVacancyRequest {
//     const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
//     let end = length === undefined ? reader.len : reader.pos + length;
//     const message = createBaseUpdateVacancyRequest();
//     while (reader.pos < end) {
//       const tag = reader.uint32();
//       switch (tag >>> 3) {
//         case 1:
//           if (tag !== 10) {
//             break;
//           }

//           message.id = reader.string();
//           continue;
//         case 2:
//           if (tag !== 18) {
//             break;
//           }

//           message.vacancy = Vacancy.decode(reader, reader.uint32());
//           continue;
//       }
//       if ((tag & 7) === 4 || tag === 0) {
//         break;
//       }
//       reader.skipType(tag & 7);
//     }
//     return message;
//   },

//   fromJSON(object: any): UpdateVacancyRequest {
//     return {
//       id: isSet(object.id) ? globalThis.String(object.id) : "",
//       vacancy: isSet(object.vacancy) ? Vacancy.fromJSON(object.vacancy) : undefined,
//     };
//   },

//   toJSON(message: UpdateVacancyRequest): unknown {
//     const obj: any = {};
//     if (message.id !== "") {
//       obj.id = message.id;
//     }
//     if (message.vacancy !== undefined) {
//       obj.vacancy = Vacancy.toJSON(message.vacancy);
//     }
//     return obj;
//   },

//   create<I extends Exact<DeepPartial<UpdateVacancyRequest>, I>>(base?: I): UpdateVacancyRequest {
//     return UpdateVacancyRequest.fromPartial(base ?? ({} as any));
//   },
//   fromPartial<I extends Exact<DeepPartial<UpdateVacancyRequest>, I>>(object: I): UpdateVacancyRequest {
//     const message = createBaseUpdateVacancyRequest();
//     message.id = object.id ?? "";
//     message.vacancy = (object.vacancy !== undefined && object.vacancy !== null)
//       ? Vacancy.fromPartial(object.vacancy)
//       : undefined;
//     return message;
//   },
// };

// function createBaseVacancyResponse(): VacancyResponse {
//   return { id: "", vacancy: undefined };
// }

// export const VacancyResponse = {
//   encode(message: VacancyResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
//     if (message.id !== "") {
//       writer.uint32(10).string(message.id);
//     }
//     if (message.vacancy !== undefined) {
//       Vacancy.encode(message.vacancy, writer.uint32(18).fork()).ldelim();
//     }
//     return writer;
//   },

//   decode(input: _m0.Reader | Uint8Array, length?: number): VacancyResponse {
//     const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
//     let end = length === undefined ? reader.len : reader.pos + length;
//     const message = createBaseVacancyResponse();
//     while (reader.pos < end) {
//       const tag = reader.uint32();
//       switch (tag >>> 3) {
//         case 1:
//           if (tag !== 10) {
//             break;
//           }

//           message.id = reader.string();
//           continue;
//         case 2:
//           if (tag !== 18) {
//             break;
//           }

//           message.vacancy = Vacancy.decode(reader, reader.uint32());
//           continue;
//       }
//       if ((tag & 7) === 4 || tag === 0) {
//         break;
//       }
//       reader.skipType(tag & 7);
//     }
//     return message;
//   },

//   fromJSON(object: any): VacancyResponse {
//     return {
//       id: isSet(object.id) ? globalThis.String(object.id) : "",
//       vacancy: isSet(object.vacancy) ? Vacancy.fromJSON(object.vacancy) : undefined,
//     };
//   },

//   toJSON(message: VacancyResponse): unknown {
//     const obj: any = {};
//     if (message.id !== "") {
//       obj.id = message.id;
//     }
//     if (message.vacancy !== undefined) {
//       obj.vacancy = Vacancy.toJSON(message.vacancy);
//     }
//     return obj;
//   },

//   create<I extends Exact<DeepPartial<VacancyResponse>, I>>(base?: I): VacancyResponse {
//     return VacancyResponse.fromPartial(base ?? ({} as any));
//   },
//   fromPartial<I extends Exact<DeepPartial<VacancyResponse>, I>>(object: I): VacancyResponse {
//     const message = createBaseVacancyResponse();
//     message.id = object.id ?? "";
//     message.vacancy = (object.vacancy !== undefined && object.vacancy !== null)
//       ? Vacancy.fromPartial(object.vacancy)
//       : undefined;
//     return message;
//   },
// };

// function createBaseVacancyCreated(): VacancyCreated {
//   return { id: "", vacancy: undefined, timestamp: undefined };
// }

// export const VacancyCreated = {
//   encode(message: VacancyCreated, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
//     if (message.id !== "") {
//       writer.uint32(10).string(message.id);
//     }
//     if (message.vacancy !== undefined) {
//       Vacancy.encode(message.vacancy, writer.uint32(18).fork()).ldelim();
//     }
//     if (message.timestamp !== undefined) {
//       Timestamp.encode(toTimestamp(message.timestamp), writer.uint32(26).fork()).ldelim();
//     }
//     return writer;
//   },

//   decode(input: _m0.Reader | Uint8Array, length?: number): VacancyCreated {
//     const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
//     let end = length === undefined ? reader.len : reader.pos + length;
//     const message = createBaseVacancyCreated();
//     while (reader.pos < end) {
//       const tag = reader.uint32();
//       switch (tag >>> 3) {
//         case 1:
//           if (tag !== 10) {
//             break;
//           }

//           message.id = reader.string();
//           continue;
//         case 2:
//           if (tag !== 18) {
//             break;
//           }

//           message.vacancy = Vacancy.decode(reader, reader.uint32());
//           continue;
//         case 3:
//           if (tag !== 26) {
//             break;
//           }

//           message.timestamp = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
//           continue;
//       }
//       if ((tag & 7) === 4 || tag === 0) {
//         break;
//       }
//       reader.skipType(tag & 7);
//     }
//     return message;
//   },

//   fromJSON(object: any): VacancyCreated {
//     return {
//       id: isSet(object.id) ? globalThis.String(object.id) : "",
//       vacancy: isSet(object.vacancy) ? Vacancy.fromJSON(object.vacancy) : undefined,
//       timestamp: isSet(object.timestamp) ? fromJsonTimestamp(object.timestamp) : undefined,
//     };
//   },

//   toJSON(message: VacancyCreated): unknown {
//     const obj: any = {};
//     if (message.id !== "") {
//       obj.id = message.id;
//     }
//     if (message.vacancy !== undefined) {
//       obj.vacancy = Vacancy.toJSON(message.vacancy);
//     }
//     if (message.timestamp !== undefined) {
//       obj.timestamp = message.timestamp.toISOString();
//     }
//     return obj;
//   },

//   create<I extends Exact<DeepPartial<VacancyCreated>, I>>(base?: I): VacancyCreated {
//     return VacancyCreated.fromPartial(base ?? ({} as any));
//   },
//   fromPartial<I extends Exact<DeepPartial<VacancyCreated>, I>>(object: I): VacancyCreated {
//     const message = createBaseVacancyCreated();
//     message.id = object.id ?? "";
//     message.vacancy = (object.vacancy !== undefined && object.vacancy !== null)
//       ? Vacancy.fromPartial(object.vacancy)
//       : undefined;
//     message.timestamp = object.timestamp ?? undefined;
//     return message;
//   },
// };

// function createBaseVacancyUpdated(): VacancyUpdated {
//   return { id: "", vacancy: undefined, timestamp: undefined };
// }

// export const VacancyUpdated = {
//   encode(message: VacancyUpdated, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
//     if (message.id !== "") {
//       writer.uint32(10).string(message.id);
//     }
//     if (message.vacancy !== undefined) {
//       Vacancy.encode(message.vacancy, writer.uint32(18).fork()).ldelim();
//     }
//     if (message.timestamp !== undefined) {
//       Timestamp.encode(toTimestamp(message.timestamp), writer.uint32(26).fork()).ldelim();
//     }
//     return writer;
//   },

//   decode(input: _m0.Reader | Uint8Array, length?: number): VacancyUpdated {
//     const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
//     let end = length === undefined ? reader.len : reader.pos + length;
//     const message = createBaseVacancyUpdated();
//     while (reader.pos < end) {
//       const tag = reader.uint32();
//       switch (tag >>> 3) {
//         case 1:
//           if (tag !== 10) {
//             break;
//           }

//           message.id = reader.string();
//           continue;
//         case 2:
//           if (tag !== 18) {
//             break;
//           }

//           message.vacancy = Vacancy.decode(reader, reader.uint32());
//           continue;
//         case 3:
//           if (tag !== 26) {
//             break;
//           }

//           message.timestamp = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
//           continue;
//       }
//       if ((tag & 7) === 4 || tag === 0) {
//         break;
//       }
//       reader.skipType(tag & 7);
//     }
//     return message;
//   },

//   fromJSON(object: any): VacancyUpdated {
//     return {
//       id: isSet(object.id) ? globalThis.String(object.id) : "",
//       vacancy: isSet(object.vacancy) ? Vacancy.fromJSON(object.vacancy) : undefined,
//       timestamp: isSet(object.timestamp) ? fromJsonTimestamp(object.timestamp) : undefined,
//     };
//   },

//   toJSON(message: VacancyUpdated): unknown {
//     const obj: any = {};
//     if (message.id !== "") {
//       obj.id = message.id;
//     }
//     if (message.vacancy !== undefined) {
//       obj.vacancy = Vacancy.toJSON(message.vacancy);
//     }
//     if (message.timestamp !== undefined) {
//       obj.timestamp = message.timestamp.toISOString();
//     }
//     return obj;
//   },

//   create<I extends Exact<DeepPartial<VacancyUpdated>, I>>(base?: I): VacancyUpdated {
//     return VacancyUpdated.fromPartial(base ?? ({} as any));
//   },
//   fromPartial<I extends Exact<DeepPartial<VacancyUpdated>, I>>(object: I): VacancyUpdated {
//     const message = createBaseVacancyUpdated();
//     message.id = object.id ?? "";
//     message.vacancy = (object.vacancy !== undefined && object.vacancy !== null)
//       ? Vacancy.fromPartial(object.vacancy)
//       : undefined;
//     message.timestamp = object.timestamp ?? undefined;
//     return message;
//   },
// };

// function createBaseGetVacancyByIdRequest(): GetVacancyByIdRequest {
//   return { id: "" };
// }

// export const GetVacancyByIdRequest = {
//   encode(message: GetVacancyByIdRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
//     if (message.id !== "") {
//       writer.uint32(10).string(message.id);
//     }
//     return writer;
//   },

//   decode(input: _m0.Reader | Uint8Array, length?: number): GetVacancyByIdRequest {
//     const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
//     let end = length === undefined ? reader.len : reader.pos + length;
//     const message = createBaseGetVacancyByIdRequest();
//     while (reader.pos < end) {
//       const tag = reader.uint32();
//       switch (tag >>> 3) {
//         case 1:
//           if (tag !== 10) {
//             break;
//           }

//           message.id = reader.string();
//           continue;
//       }
//       if ((tag & 7) === 4 || tag === 0) {
//         break;
//       }
//       reader.skipType(tag & 7);
//     }
//     return message;
//   },

//   fromJSON(object: any): GetVacancyByIdRequest {
//     return { id: isSet(object.id) ? globalThis.String(object.id) : "" };
//   },

//   toJSON(message: GetVacancyByIdRequest): unknown {
//     const obj: any = {};
//     if (message.id !== "") {
//       obj.id = message.id;
//     }
//     return obj;
//   },

//   create<I extends Exact<DeepPartial<GetVacancyByIdRequest>, I>>(base?: I): GetVacancyByIdRequest {
//     return GetVacancyByIdRequest.fromPartial(base ?? ({} as any));
//   },
//   fromPartial<I extends Exact<DeepPartial<GetVacancyByIdRequest>, I>>(object: I): GetVacancyByIdRequest {
//     const message = createBaseGetVacancyByIdRequest();
//     message.id = object.id ?? "";
//     return message;
//   },
// };

// function createBaseGetVacanciesByParamsRequest(): GetVacanciesByParamsRequest {
//   return { expectedSkills: [], aboutPractice: "", directions: [], companyId: "" };
// }

// export const GetVacanciesByParamsRequest = {
//   encode(message: GetVacanciesByParamsRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
//     for (const v of message.expectedSkills) {
//       Skill.encode(v!, writer.uint32(10).fork()).ldelim();
//     }
//     if (message.aboutPractice !== "") {
//       writer.uint32(18).string(message.aboutPractice);
//     }
//     for (const v of message.directions) {
//       Direction.encode(v!, writer.uint32(26).fork()).ldelim();
//     }
//     if (message.companyId !== "") {
//       writer.uint32(34).string(message.companyId);
//     }
//     return writer;
//   },

//   decode(input: _m0.Reader | Uint8Array, length?: number): GetVacanciesByParamsRequest {
//     const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
//     let end = length === undefined ? reader.len : reader.pos + length;
//     const message = createBaseGetVacanciesByParamsRequest();
//     while (reader.pos < end) {
//       const tag = reader.uint32();
//       switch (tag >>> 3) {
//         case 1:
//           if (tag !== 10) {
//             break;
//           }

//           message.expectedSkills.push(Skill.decode(reader, reader.uint32()));
//           continue;
//         case 2:
//           if (tag !== 18) {
//             break;
//           }

//           message.aboutPractice = reader.string();
//           continue;
//         case 3:
//           if (tag !== 26) {
//             break;
//           }

//           message.directions.push(Direction.decode(reader, reader.uint32()));
//           continue;
//         case 4:
//           if (tag !== 34) {
//             break;
//           }

//           message.companyId = reader.string();
//           continue;
//       }
//       if ((tag & 7) === 4 || tag === 0) {
//         break;
//       }
//       reader.skipType(tag & 7);
//     }
//     return message;
//   },

//   fromJSON(object: any): GetVacanciesByParamsRequest {
//     return {
//       expectedSkills: globalThis.Array.isArray(object?.expectedSkills)
//         ? object.expectedSkills.map((e: any) => Skill.fromJSON(e))
//         : [],
//       aboutPractice: isSet(object.aboutPractice) ? globalThis.String(object.aboutPractice) : "",
//       directions: globalThis.Array.isArray(object?.directions)
//         ? object.directions.map((e: any) => Direction.fromJSON(e))
//         : [],
//       companyId: isSet(object.companyId) ? globalThis.String(object.companyId) : "",
//     };
//   },

//   toJSON(message: GetVacanciesByParamsRequest): unknown {
//     const obj: any = {};
//     if (message.expectedSkills?.length) {
//       obj.expectedSkills = message.expectedSkills.map((e) => Skill.toJSON(e));
//     }
//     if (message.aboutPractice !== "") {
//       obj.aboutPractice = message.aboutPractice;
//     }
//     if (message.directions?.length) {
//       obj.directions = message.directions.map((e) => Direction.toJSON(e));
//     }
//     if (message.companyId !== "") {
//       obj.companyId = message.companyId;
//     }
//     return obj;
//   },

//   create<I extends Exact<DeepPartial<GetVacanciesByParamsRequest>, I>>(base?: I): GetVacanciesByParamsRequest {
//     return GetVacanciesByParamsRequest.fromPartial(base ?? ({} as any));
//   },
//   fromPartial<I extends Exact<DeepPartial<GetVacanciesByParamsRequest>, I>>(object: I): GetVacanciesByParamsRequest {
//     const message = createBaseGetVacanciesByParamsRequest();
//     message.expectedSkills = object.expectedSkills?.map((e) => Skill.fromPartial(e)) || [];
//     message.aboutPractice = object.aboutPractice ?? "";
//     message.directions = object.directions?.map((e) => Direction.fromPartial(e)) || [];
//     message.companyId = object.companyId ?? "";
//     return message;
//   },
// };

// function createBaseGetVacanciesResponse(): GetVacanciesResponse {
//   return { vacancies: [] };
// }

// export const GetVacanciesResponse = {
//   encode(message: GetVacanciesResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
//     for (const v of message.vacancies) {
//       VacancyWithId.encode(v!, writer.uint32(10).fork()).ldelim();
//     }
//     return writer;
//   },

//   decode(input: _m0.Reader | Uint8Array, length?: number): GetVacanciesResponse {
//     const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
//     let end = length === undefined ? reader.len : reader.pos + length;
//     const message = createBaseGetVacanciesResponse();
//     while (reader.pos < end) {
//       const tag = reader.uint32();
//       switch (tag >>> 3) {
//         case 1:
//           if (tag !== 10) {
//             break;
//           }

//           message.vacancies.push(VacancyWithId.decode(reader, reader.uint32()));
//           continue;
//       }
//       if ((tag & 7) === 4 || tag === 0) {
//         break;
//       }
//       reader.skipType(tag & 7);
//     }
//     return message;
//   },

//   fromJSON(object: any): GetVacanciesResponse {
//     return {
//       vacancies: globalThis.Array.isArray(object?.vacancies)
//         ? object.vacancies.map((e: any) => VacancyWithId.fromJSON(e))
//         : [],
//     };
//   },

//   toJSON(message: GetVacanciesResponse): unknown {
//     const obj: any = {};
//     if (message.vacancies?.length) {
//       obj.vacancies = message.vacancies.map((e) => VacancyWithId.toJSON(e));
//     }
//     return obj;
//   },

//   create<I extends Exact<DeepPartial<GetVacanciesResponse>, I>>(base?: I): GetVacanciesResponse {
//     return GetVacanciesResponse.fromPartial(base ?? ({} as any));
//   },
//   fromPartial<I extends Exact<DeepPartial<GetVacanciesResponse>, I>>(object: I): GetVacanciesResponse {
//     const message = createBaseGetVacanciesResponse();
//     message.vacancies = object.vacancies?.map((e) => VacancyWithId.fromPartial(e)) || [];
//     return message;
//   },
// };

// function createBaseVacancyWithId(): VacancyWithId {
//   return { id: "", expectedSkills: [], aboutPractice: "", directions: [], aboutProjects: "", companyId: "" };
// }

// export const VacancyWithId = {
//   encode(message: VacancyWithId, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
//     if (message.id !== "") {
//       writer.uint32(10).string(message.id);
//     }
//     for (const v of message.expectedSkills) {
//       Skill.encode(v!, writer.uint32(18).fork()).ldelim();
//     }
//     if (message.aboutPractice !== "") {
//       writer.uint32(26).string(message.aboutPractice);
//     }
//     for (const v of message.directions) {
//       Direction.encode(v!, writer.uint32(34).fork()).ldelim();
//     }
//     if (message.aboutProjects !== "") {
//       writer.uint32(42).string(message.aboutProjects);
//     }
//     if (message.companyId !== "") {
//       writer.uint32(50).string(message.companyId);
//     }
//     return writer;
//   },

//   decode(input: _m0.Reader | Uint8Array, length?: number): VacancyWithId {
//     const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
//     let end = length === undefined ? reader.len : reader.pos + length;
//     const message = createBaseVacancyWithId();
//     while (reader.pos < end) {
//       const tag = reader.uint32();
//       switch (tag >>> 3) {
//         case 1:
//           if (tag !== 10) {
//             break;
//           }

//           message.id = reader.string();
//           continue;
//         case 2:
//           if (tag !== 18) {
//             break;
//           }

//           message.expectedSkills.push(Skill.decode(reader, reader.uint32()));
//           continue;
//         case 3:
//           if (tag !== 26) {
//             break;
//           }

//           message.aboutPractice = reader.string();
//           continue;
//         case 4:
//           if (tag !== 34) {
//             break;
//           }

//           message.directions.push(Direction.decode(reader, reader.uint32()));
//           continue;
//         case 5:
//           if (tag !== 42) {
//             break;
//           }

//           message.aboutProjects = reader.string();
//           continue;
//         case 6:
//           if (tag !== 50) {
//             break;
//           }

//           message.companyId = reader.string();
//           continue;
//       }
//       if ((tag & 7) === 4 || tag === 0) {
//         break;
//       }
//       reader.skipType(tag & 7);
//     }
//     return message;
//   },

//   fromJSON(object: any): VacancyWithId {
//     return {
//       id: isSet(object.id) ? globalThis.String(object.id) : "",
//       expectedSkills: globalThis.Array.isArray(object?.expectedSkills)
//         ? object.expectedSkills.map((e: any) => Skill.fromJSON(e))
//         : [],
//       aboutPractice: isSet(object.aboutPractice) ? globalThis.String(object.aboutPractice) : "",
//       directions: globalThis.Array.isArray(object?.directions)
//         ? object.directions.map((e: any) => Direction.fromJSON(e))
//         : [],
//       aboutProjects: isSet(object.aboutProjects) ? globalThis.String(object.aboutProjects) : "",
//       companyId: isSet(object.companyId) ? globalThis.String(object.companyId) : "",
//     };
//   },

//   toJSON(message: VacancyWithId): unknown {
//     const obj: any = {};
//     if (message.id !== "") {
//       obj.id = message.id;
//     }
//     if (message.expectedSkills?.length) {
//       obj.expectedSkills = message.expectedSkills.map((e) => Skill.toJSON(e));
//     }
//     if (message.aboutPractice !== "") {
//       obj.aboutPractice = message.aboutPractice;
//     }
//     if (message.directions?.length) {
//       obj.directions = message.directions.map((e) => Direction.toJSON(e));
//     }
//     if (message.aboutProjects !== "") {
//       obj.aboutProjects = message.aboutProjects;
//     }
//     if (message.companyId !== "") {
//       obj.companyId = message.companyId;
//     }
//     return obj;
//   },

//   create<I extends Exact<DeepPartial<VacancyWithId>, I>>(base?: I): VacancyWithId {
//     return VacancyWithId.fromPartial(base ?? ({} as any));
//   },
//   fromPartial<I extends Exact<DeepPartial<VacancyWithId>, I>>(object: I): VacancyWithId {
//     const message = createBaseVacancyWithId();
//     message.id = object.id ?? "";
//     message.expectedSkills = object.expectedSkills?.map((e) => Skill.fromPartial(e)) || [];
//     message.aboutPractice = object.aboutPractice ?? "";
//     message.directions = object.directions?.map((e) => Direction.fromPartial(e)) || [];
//     message.aboutProjects = object.aboutProjects ?? "";
//     message.companyId = object.companyId ?? "";
//     return message;
//   },
// };

// /** gRPC-сервис */
// export interface VacancyService {
//   CreateVacancy(request: CreateVacancyRequest): Promise<VacancyResponse>;
//   UpdateVacancy(request: UpdateVacancyRequest): Promise<VacancyResponse>;
//   /** Новый метод для получения вакансии по ID */
//   GetVacancyById(request: GetVacancyByIdRequest): Promise<VacancyResponse>;
//   /** Новый метод для получения списка вакансий по параметрам */
//   GetVacanciesByParams(request: GetVacanciesByParamsRequest): Promise<GetVacanciesResponse>;
// }

// export const VacancyServiceServiceName = "vacancy.VacancyService";
// export class VacancyServiceClientImpl implements VacancyService {
//   private readonly rpc: Rpc;
//   private readonly service: string;
//   constructor(rpc: Rpc, opts?: { service?: string }) {
//     this.service = opts?.service || VacancyServiceServiceName;
//     this.rpc = rpc;
//     this.CreateVacancy = this.CreateVacancy.bind(this);
//     this.UpdateVacancy = this.UpdateVacancy.bind(this);
//     this.GetVacancyById = this.GetVacancyById.bind(this);
//     this.GetVacanciesByParams = this.GetVacanciesByParams.bind(this);
//   }
//   async CreateVacancy(request: CreateVacancyRequest, p0: (error: { message: any; }, response: any) => void): Promise<VacancyResponse> {
//     const data = CreateVacancyRequest.encode(request).finish();
//     const promise = this.rpc.request(this.service, "CreateVacancy", data);
//     const data_1 = await promise;
//     return VacancyResponse.decode(_m0.Reader.create(data_1));
//   }

//   async UpdateVacancy(request: UpdateVacancyRequest): Promise<VacancyResponse> {
//     const data = UpdateVacancyRequest.encode(request).finish();
//     const promise = this.rpc.request(this.service, "UpdateVacancy", data);
//     const data_1 = await promise;
//     return VacancyResponse.decode(_m0.Reader.create(data_1));
//   }

//   async GetVacancyById(request: GetVacancyByIdRequest): Promise<VacancyResponse> {
//     const data = GetVacancyByIdRequest.encode(request).finish();
//     const promise = this.rpc.request(this.service, "GetVacancyById", data);
//     const data_1 = await promise;
//     return VacancyResponse.decode(_m0.Reader.create(data_1));
//   }

//   async GetVacanciesByParams(request: GetVacanciesByParamsRequest): Promise<GetVacanciesResponse> {
//     const data = GetVacanciesByParamsRequest.encode(request).finish();
//     const promise = this.rpc.request(this.service, "GetVacanciesByParams", data);
//     const data_1 = await promise;
//     return GetVacanciesResponse.decode(_m0.Reader.create(data_1));
//   }
// }

// export interface Rpc {
//   request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
// }

// type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

// export type DeepPartial<T> = T extends Builtin ? T
//   : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
//   : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
//   : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
//   : Partial<T>;

// type KeysOfUnion<T> = T extends T ? keyof T : never;
// export type Exact<P, I extends P> = P extends Builtin ? P
//   : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

// function toTimestamp(date: Date): Timestamp {
//   const seconds = Math.trunc(date.getTime() / 1_000);
//   const nanos = (date.getTime() % 1_000) * 1_000_000;
//   return { seconds, nanos };
// }

// function fromTimestamp(t: Timestamp): Date {
//   let millis = (t.seconds || 0) * 1_000;
//   millis += (t.nanos || 0) / 1_000_000;
//   return new globalThis.Date(millis);
// }

// function fromJsonTimestamp(o: any): Date {
//   if (o instanceof globalThis.Date) {
//     return o;
//   } else if (typeof o === "string") {
//     return new globalThis.Date(o);
//   } else {
//     return fromTimestamp(Timestamp.fromJSON(o));
//   }
// }

// function isSet(value: any): boolean {
//   return value !== null && value !== undefined;
// }
