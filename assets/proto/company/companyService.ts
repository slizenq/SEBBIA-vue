// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.5
//   protoc               v5.28.2
// source: companyService.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Company, GetCompanyResponse, Photo } from "./company.js";
import { Empty } from "./../../../google/protobuf/empty.js";
import { Timestamp } from "./../../../google/protobuf/timestamp.js";

export const protobufPackage = "company";

export interface ChangeCompanyRequest {
  title?: string | undefined;
  foundationDate?: Date | undefined;
  photo?: Photo | undefined;
  aboutCompany?: string | undefined;
  typeCompany?: string | undefined;
  location?: string | undefined;
  contracts: string[];
  id: string;
}

export interface GetCompanyRequest {
  title?: string | undefined;
  aboutCompany?: string | undefined;
  typeCompany?: string | undefined;
  location?: string | undefined;
  contracts: string[];
}

export interface FilterResponse {
  company: GetCompanyResponse[];
  nextPageToken: string;
}

export interface CompanyId {
  id: string;
}

export interface Filters {
  typeCompany?: string | undefined;
  location?: string | undefined;
  contracts: string[];
  pageSize: number;
  pageToken: string;
}

export interface SearchRequest {
  title: string;
  pageSize: number;
  pageToken: string;
}

function createBaseChangeCompanyRequest(): ChangeCompanyRequest {
  return {
    title: undefined,
    foundationDate: undefined,
    photo: undefined,
    aboutCompany: undefined,
    typeCompany: undefined,
    location: undefined,
    contracts: [],
    id: "",
  };
}

export const ChangeCompanyRequest: MessageFns<ChangeCompanyRequest> = {
  encode(message: ChangeCompanyRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.title !== undefined) {
      writer.uint32(10).string(message.title);
    }
    if (message.foundationDate !== undefined) {
      Timestamp.encode(toTimestamp(message.foundationDate), writer.uint32(18).fork()).join();
    }
    if (message.photo !== undefined) {
      Photo.encode(message.photo, writer.uint32(26).fork()).join();
    }
    if (message.aboutCompany !== undefined) {
      writer.uint32(34).string(message.aboutCompany);
    }
    if (message.typeCompany !== undefined) {
      writer.uint32(42).string(message.typeCompany);
    }
    if (message.location !== undefined) {
      writer.uint32(58).string(message.location);
    }
    for (const v of message.contracts) {
      writer.uint32(66).string(v!);
    }
    if (message.id !== "") {
      writer.uint32(74).string(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ChangeCompanyRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseChangeCompanyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.title = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.foundationDate = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.photo = Photo.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.aboutCompany = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.typeCompany = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.location = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.contracts.push(reader.string());
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.id = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ChangeCompanyRequest {
    return {
      title: isSet(object.title) ? globalThis.String(object.title) : undefined,
      foundationDate: isSet(object.foundationDate) ? fromJsonTimestamp(object.foundationDate) : undefined,
      photo: isSet(object.photo) ? Photo.fromJSON(object.photo) : undefined,
      aboutCompany: isSet(object.aboutCompany) ? globalThis.String(object.aboutCompany) : undefined,
      typeCompany: isSet(object.typeCompany) ? globalThis.String(object.typeCompany) : undefined,
      location: isSet(object.location) ? globalThis.String(object.location) : undefined,
      contracts: globalThis.Array.isArray(object?.contracts)
        ? object.contracts.map((e: any) => globalThis.String(e))
        : [],
      id: isSet(object.id) ? globalThis.String(object.id) : "",
    };
  },

  toJSON(message: ChangeCompanyRequest): unknown {
    const obj: any = {};
    if (message.title !== undefined) {
      obj.title = message.title;
    }
    if (message.foundationDate !== undefined) {
      obj.foundationDate = message.foundationDate.toISOString();
    }
    if (message.photo !== undefined) {
      obj.photo = Photo.toJSON(message.photo);
    }
    if (message.aboutCompany !== undefined) {
      obj.aboutCompany = message.aboutCompany;
    }
    if (message.typeCompany !== undefined) {
      obj.typeCompany = message.typeCompany;
    }
    if (message.location !== undefined) {
      obj.location = message.location;
    }
    if (message.contracts?.length) {
      obj.contracts = message.contracts;
    }
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ChangeCompanyRequest>, I>>(base?: I): ChangeCompanyRequest {
    return ChangeCompanyRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ChangeCompanyRequest>, I>>(object: I): ChangeCompanyRequest {
    const message = createBaseChangeCompanyRequest();
    message.title = object.title ?? undefined;
    message.foundationDate = object.foundationDate ?? undefined;
    message.photo = (object.photo !== undefined && object.photo !== null) ? Photo.fromPartial(object.photo) : undefined;
    message.aboutCompany = object.aboutCompany ?? undefined;
    message.typeCompany = object.typeCompany ?? undefined;
    message.location = object.location ?? undefined;
    message.contracts = object.contracts?.map((e) => e) || [];
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseGetCompanyRequest(): GetCompanyRequest {
  return { title: undefined, aboutCompany: undefined, typeCompany: undefined, location: undefined, contracts: [] };
}

export const GetCompanyRequest: MessageFns<GetCompanyRequest> = {
  encode(message: GetCompanyRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.title !== undefined) {
      writer.uint32(10).string(message.title);
    }
    if (message.aboutCompany !== undefined) {
      writer.uint32(26).string(message.aboutCompany);
    }
    if (message.typeCompany !== undefined) {
      writer.uint32(34).string(message.typeCompany);
    }
    if (message.location !== undefined) {
      writer.uint32(50).string(message.location);
    }
    for (const v of message.contracts) {
      writer.uint32(58).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetCompanyRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetCompanyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.title = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.aboutCompany = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.typeCompany = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.location = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.contracts.push(reader.string());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetCompanyRequest {
    return {
      title: isSet(object.title) ? globalThis.String(object.title) : undefined,
      aboutCompany: isSet(object.aboutCompany) ? globalThis.String(object.aboutCompany) : undefined,
      typeCompany: isSet(object.typeCompany) ? globalThis.String(object.typeCompany) : undefined,
      location: isSet(object.location) ? globalThis.String(object.location) : undefined,
      contracts: globalThis.Array.isArray(object?.contracts)
        ? object.contracts.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: GetCompanyRequest): unknown {
    const obj: any = {};
    if (message.title !== undefined) {
      obj.title = message.title;
    }
    if (message.aboutCompany !== undefined) {
      obj.aboutCompany = message.aboutCompany;
    }
    if (message.typeCompany !== undefined) {
      obj.typeCompany = message.typeCompany;
    }
    if (message.location !== undefined) {
      obj.location = message.location;
    }
    if (message.contracts?.length) {
      obj.contracts = message.contracts;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetCompanyRequest>, I>>(base?: I): GetCompanyRequest {
    return GetCompanyRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetCompanyRequest>, I>>(object: I): GetCompanyRequest {
    const message = createBaseGetCompanyRequest();
    message.title = object.title ?? undefined;
    message.aboutCompany = object.aboutCompany ?? undefined;
    message.typeCompany = object.typeCompany ?? undefined;
    message.location = object.location ?? undefined;
    message.contracts = object.contracts?.map((e) => e) || [];
    return message;
  },
};

function createBaseFilterResponse(): FilterResponse {
  return { company: [], nextPageToken: "" };
}

export const FilterResponse: MessageFns<FilterResponse> = {
  encode(message: FilterResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.company) {
      GetCompanyResponse.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FilterResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFilterResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.company.push(GetCompanyResponse.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FilterResponse {
    return {
      company: globalThis.Array.isArray(object?.company)
        ? object.company.map((e: any) => GetCompanyResponse.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: FilterResponse): unknown {
    const obj: any = {};
    if (message.company?.length) {
      obj.company = message.company.map((e) => GetCompanyResponse.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<FilterResponse>, I>>(base?: I): FilterResponse {
    return FilterResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<FilterResponse>, I>>(object: I): FilterResponse {
    const message = createBaseFilterResponse();
    message.company = object.company?.map((e) => GetCompanyResponse.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseCompanyId(): CompanyId {
  return { id: "" };
}

export const CompanyId: MessageFns<CompanyId> = {
  encode(message: CompanyId, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CompanyId {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCompanyId();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CompanyId {
    return { id: isSet(object.id) ? globalThis.String(object.id) : "" };
  },

  toJSON(message: CompanyId): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CompanyId>, I>>(base?: I): CompanyId {
    return CompanyId.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CompanyId>, I>>(object: I): CompanyId {
    const message = createBaseCompanyId();
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseFilters(): Filters {
  return { typeCompany: undefined, location: undefined, contracts: [], pageSize: 0, pageToken: "" };
}

export const Filters: MessageFns<Filters> = {
  encode(message: Filters, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.typeCompany !== undefined) {
      writer.uint32(34).string(message.typeCompany);
    }
    if (message.location !== undefined) {
      writer.uint32(50).string(message.location);
    }
    for (const v of message.contracts) {
      writer.uint32(58).string(v!);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Filters {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFilters();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.typeCompany = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.location = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.contracts.push(reader.string());
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Filters {
    return {
      typeCompany: isSet(object.typeCompany) ? globalThis.String(object.typeCompany) : undefined,
      location: isSet(object.location) ? globalThis.String(object.location) : undefined,
      contracts: globalThis.Array.isArray(object?.contracts)
        ? object.contracts.map((e: any) => globalThis.String(e))
        : [],
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
    };
  },

  toJSON(message: Filters): unknown {
    const obj: any = {};
    if (message.typeCompany !== undefined) {
      obj.typeCompany = message.typeCompany;
    }
    if (message.location !== undefined) {
      obj.location = message.location;
    }
    if (message.contracts?.length) {
      obj.contracts = message.contracts;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Filters>, I>>(base?: I): Filters {
    return Filters.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Filters>, I>>(object: I): Filters {
    const message = createBaseFilters();
    message.typeCompany = object.typeCompany ?? undefined;
    message.location = object.location ?? undefined;
    message.contracts = object.contracts?.map((e) => e) || [];
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    return message;
  },
};

function createBaseSearchRequest(): SearchRequest {
  return { title: "", pageSize: 0, pageToken: "" };
}

export const SearchRequest: MessageFns<SearchRequest> = {
  encode(message: SearchRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.title !== "") {
      writer.uint32(10).string(message.title);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int64(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SearchRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSearchRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.title = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.pageSize = longToNumber(reader.int64());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SearchRequest {
    return {
      title: isSet(object.title) ? globalThis.String(object.title) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
    };
  },

  toJSON(message: SearchRequest): unknown {
    const obj: any = {};
    if (message.title !== "") {
      obj.title = message.title;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SearchRequest>, I>>(base?: I): SearchRequest {
    return SearchRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SearchRequest>, I>>(object: I): SearchRequest {
    const message = createBaseSearchRequest();
    message.title = object.title ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    return message;
  },
};

export interface CompanyService {
  CreateCompany(request: Company): Promise<GetCompanyResponse>;
  ChangeCompany(request: ChangeCompanyRequest): Promise<GetCompanyResponse>;
  GetCompany(request: GetCompanyRequest): Promise<GetCompanyResponse>;
  GetCompanyById(request: CompanyId): Promise<GetCompanyResponse>;
  GetCompanyByAccessToken(request: Empty): Promise<GetCompanyResponse>;
  SearchCompany(request: SearchRequest): Promise<FilterResponse>;
  GetCompaniesByFilters(request: Filters): Promise<FilterResponse>;
}

export const CompanyServiceServiceName = "company.CompanyService";
export class CompanyServiceClientImpl implements CompanyService {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || CompanyServiceServiceName;
    this.rpc = rpc;
    this.CreateCompany = this.CreateCompany.bind(this);
    this.ChangeCompany = this.ChangeCompany.bind(this);
    this.GetCompany = this.GetCompany.bind(this);
    this.GetCompanyById = this.GetCompanyById.bind(this);
    this.GetCompanyByAccessToken = this.GetCompanyByAccessToken.bind(this);
    this.SearchCompany = this.SearchCompany.bind(this);
    this.GetCompaniesByFilters = this.GetCompaniesByFilters.bind(this);
  }
  CreateCompany(request: Company): Promise<GetCompanyResponse> {
    const data = Company.encode(request).finish();
    const promise = this.rpc.request(this.service, "CreateCompany", data);
    return promise.then((data) => GetCompanyResponse.decode(new BinaryReader(data)));
  }

  ChangeCompany(request: ChangeCompanyRequest): Promise<GetCompanyResponse> {
    const data = ChangeCompanyRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "ChangeCompany", data);
    return promise.then((data) => GetCompanyResponse.decode(new BinaryReader(data)));
  }

  GetCompany(request: GetCompanyRequest): Promise<GetCompanyResponse> {
    const data = GetCompanyRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "GetCompany", data);
    return promise.then((data) => GetCompanyResponse.decode(new BinaryReader(data)));
  }

  GetCompanyById(request: CompanyId): Promise<GetCompanyResponse> {
    const data = CompanyId.encode(request).finish();
    const promise = this.rpc.request(this.service, "GetCompanyById", data);
    return promise.then((data) => GetCompanyResponse.decode(new BinaryReader(data)));
  }

  GetCompanyByAccessToken(request: Empty): Promise<GetCompanyResponse> {
    const data = Empty.encode(request).finish();
    const promise = this.rpc.request(this.service, "GetCompanyByAccessToken", data);
    return promise.then((data) => GetCompanyResponse.decode(new BinaryReader(data)));
  }

  SearchCompany(request: SearchRequest): Promise<FilterResponse> {
    const data = SearchRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "SearchCompany", data);
    return promise.then((data) => FilterResponse.decode(new BinaryReader(data)));
  }

  GetCompaniesByFilters(request: Filters): Promise<FilterResponse> {
    const data = Filters.encode(request).finish();
    const promise = this.rpc.request(this.service, "GetCompaniesByFilters", data);
    return promise.then((data) => FilterResponse.decode(new BinaryReader(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function toTimestamp(date: Date): Timestamp {
  const seconds = Math.trunc(date.getTime() / 1_000);
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
