/**
 * @fileoverview gRPC-Web generated client stub for company
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.5.0
// 	protoc              v5.28.2
// source: companyService.proto


/* eslint-disable */
// @ts-nocheck



const grpc = {};
grpc.web = require('grpc-web');


var company_pb = require('./company_pb.js')

var google_protobuf_timestamp_pb = require('google-protobuf/google/protobuf/timestamp_pb.js')
const proto = {};
proto.company = require('./companyService_pb.js');

/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.company.CompanyServiceClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.company.CompanyServicePromiseClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.company.Company,
 *   !proto.company.GetCompanyResponse>}
 */
const methodDescriptor_CompanyService_CreateCompany = new grpc.web.MethodDescriptor(
  '/company.CompanyService/CreateCompany',
  grpc.web.MethodType.UNARY,
  company_pb.Company,
  company_pb.GetCompanyResponse,
  /**
   * @param {!proto.company.Company} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  company_pb.GetCompanyResponse.deserializeBinary
);


/**
 * @param {!proto.company.Company} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.company.GetCompanyResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.company.GetCompanyResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.company.CompanyServiceClient.prototype.createCompany =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/company.CompanyService/CreateCompany',
      request,
      metadata || {},
      methodDescriptor_CompanyService_CreateCompany,
      callback);
};


/**
 * @param {!proto.company.Company} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.company.GetCompanyResponse>}
 *     Promise that resolves to the response
 */
proto.company.CompanyServicePromiseClient.prototype.createCompany =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/company.CompanyService/CreateCompany',
      request,
      metadata || {},
      methodDescriptor_CompanyService_CreateCompany);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.company.ChangeCompanyRequest,
 *   !proto.company.GetCompanyResponse>}
 */
const methodDescriptor_CompanyService_ChangeCompany = new grpc.web.MethodDescriptor(
  '/company.CompanyService/ChangeCompany',
  grpc.web.MethodType.UNARY,
  proto.company.ChangeCompanyRequest,
  company_pb.GetCompanyResponse,
  /**
   * @param {!proto.company.ChangeCompanyRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  company_pb.GetCompanyResponse.deserializeBinary
);


/**
 * @param {!proto.company.ChangeCompanyRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.company.GetCompanyResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.company.GetCompanyResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.company.CompanyServiceClient.prototype.changeCompany =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/company.CompanyService/ChangeCompany',
      request,
      metadata || {},
      methodDescriptor_CompanyService_ChangeCompany,
      callback);
};


/**
 * @param {!proto.company.ChangeCompanyRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.company.GetCompanyResponse>}
 *     Promise that resolves to the response
 */
proto.company.CompanyServicePromiseClient.prototype.changeCompany =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/company.CompanyService/ChangeCompany',
      request,
      metadata || {},
      methodDescriptor_CompanyService_ChangeCompany);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.company.GetCompanyRequest,
 *   !proto.company.GetCompanyResponse>}
 */
const methodDescriptor_CompanyService_GetCompany = new grpc.web.MethodDescriptor(
  '/company.CompanyService/GetCompany',
  grpc.web.MethodType.UNARY,
  proto.company.GetCompanyRequest,
  company_pb.GetCompanyResponse,
  /**
   * @param {!proto.company.GetCompanyRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  company_pb.GetCompanyResponse.deserializeBinary
);


/**
 * @param {!proto.company.GetCompanyRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.company.GetCompanyResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.company.GetCompanyResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.company.CompanyServiceClient.prototype.getCompany =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/company.CompanyService/GetCompany',
      request,
      metadata || {},
      methodDescriptor_CompanyService_GetCompany,
      callback);
};


/**
 * @param {!proto.company.GetCompanyRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.company.GetCompanyResponse>}
 *     Promise that resolves to the response
 */
proto.company.CompanyServicePromiseClient.prototype.getCompany =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/company.CompanyService/GetCompany',
      request,
      metadata || {},
      methodDescriptor_CompanyService_GetCompany);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.company.Filters,
 *   !proto.company.FilterResponse>}
 */
const methodDescriptor_CompanyService_GetCompaniesByFilters = new grpc.web.MethodDescriptor(
  '/company.CompanyService/GetCompaniesByFilters',
  grpc.web.MethodType.UNARY,
  proto.company.Filters,
  proto.company.FilterResponse,
  /**
   * @param {!proto.company.Filters} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.company.FilterResponse.deserializeBinary
);


/**
 * @param {!proto.company.Filters} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.company.FilterResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.company.FilterResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.company.CompanyServiceClient.prototype.getCompaniesByFilters =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/company.CompanyService/GetCompaniesByFilters',
      request,
      metadata || {},
      methodDescriptor_CompanyService_GetCompaniesByFilters,
      callback);
};


/**
 * @param {!proto.company.Filters} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.company.FilterResponse>}
 *     Promise that resolves to the response
 */
proto.company.CompanyServicePromiseClient.prototype.getCompaniesByFilters =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/company.CompanyService/GetCompaniesByFilters',
      request,
      metadata || {},
      methodDescriptor_CompanyService_GetCompaniesByFilters);
};


module.exports = proto.company;

