"use strict";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.4
//   protoc               v5.28.2
// source: authService.proto
Object.defineProperty(exports, "__esModule", { value: true });
exports.Empty = exports.SSOServerServiceClientImpl = exports.SSOServerServiceServiceName = exports.TokensWithUserInfo = exports.SendOTPRequest = exports.RestorePasswordRequest = exports.OTPResponse = exports.OTPRequest = exports.VerifyTokenResponse = exports.NewEmail = exports.NewPassword = exports.PairTokens = exports.AccessToken = exports.RefreshToken = exports.Token = exports.LoginData = exports.protobufPackage = void 0;
/* eslint-disable */
var wire_1 = require("@bufbuild/protobuf/wire");
var account_js_1 = require("./account.js");
var empty_js_1 = require("./google/protobuf/empty.js");
Object.defineProperty(exports, "Empty", { enumerable: true, get: function () { return empty_js_1.Empty; } });
exports.protobufPackage = "pb";
function createBaseLoginData() {
    return { email: undefined, password: undefined };
}
exports.LoginData = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = new wire_1.BinaryWriter(); }
        if (message.email !== undefined) {
            account_js_1.Email.encode(message.email, writer.uint32(10).fork()).join();
        }
        if (message.password !== undefined) {
            account_js_1.Password.encode(message.password, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseLoginData();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.email = account_js_1.Email.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.password = account_js_1.Password.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            email: isSet(object.email) ? account_js_1.Email.fromJSON(object.email) : undefined,
            password: isSet(object.password) ? account_js_1.Password.fromJSON(object.password) : undefined,
        };
    },
    toJSON: function (message) {
        var obj = {};
        if (message.email !== undefined) {
            obj.email = account_js_1.Email.toJSON(message.email);
        }
        if (message.password !== undefined) {
            obj.password = account_js_1.Password.toJSON(message.password);
        }
        return obj;
    },
    create: function (base) {
        return exports.LoginData.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial: function (object) {
        var message = createBaseLoginData();
        message.email = (object.email !== undefined && object.email !== null) ? account_js_1.Email.fromPartial(object.email) : undefined;
        message.password = (object.password !== undefined && object.password !== null)
            ? account_js_1.Password.fromPartial(object.password)
            : undefined;
        return message;
    },
};
function createBaseToken() {
    return { token: "" };
}
exports.Token = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = new wire_1.BinaryWriter(); }
        if (message.token !== "") {
            writer.uint32(10).string(message.token);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseToken();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.token = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON: function (object) {
        return { token: isSet(object.token) ? globalThis.String(object.token) : "" };
    },
    toJSON: function (message) {
        var obj = {};
        if (message.token !== "") {
            obj.token = message.token;
        }
        return obj;
    },
    create: function (base) {
        return exports.Token.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial: function (object) {
        var _a;
        var message = createBaseToken();
        message.token = (_a = object.token) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseRefreshToken() {
    return { refreshToken: undefined };
}
exports.RefreshToken = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = new wire_1.BinaryWriter(); }
        if (message.refreshToken !== undefined) {
            exports.Token.encode(message.refreshToken, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseRefreshToken();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.refreshToken = exports.Token.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON: function (object) {
        return { refreshToken: isSet(object.refreshToken) ? exports.Token.fromJSON(object.refreshToken) : undefined };
    },
    toJSON: function (message) {
        var obj = {};
        if (message.refreshToken !== undefined) {
            obj.refreshToken = exports.Token.toJSON(message.refreshToken);
        }
        return obj;
    },
    create: function (base) {
        return exports.RefreshToken.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial: function (object) {
        var message = createBaseRefreshToken();
        message.refreshToken = (object.refreshToken !== undefined && object.refreshToken !== null)
            ? exports.Token.fromPartial(object.refreshToken)
            : undefined;
        return message;
    },
};
function createBaseAccessToken() {
    return { accessToken: undefined };
}
exports.AccessToken = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = new wire_1.BinaryWriter(); }
        if (message.accessToken !== undefined) {
            exports.Token.encode(message.accessToken, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseAccessToken();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.accessToken = exports.Token.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON: function (object) {
        return { accessToken: isSet(object.accessToken) ? exports.Token.fromJSON(object.accessToken) : undefined };
    },
    toJSON: function (message) {
        var obj = {};
        if (message.accessToken !== undefined) {
            obj.accessToken = exports.Token.toJSON(message.accessToken);
        }
        return obj;
    },
    create: function (base) {
        return exports.AccessToken.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial: function (object) {
        var message = createBaseAccessToken();
        message.accessToken = (object.accessToken !== undefined && object.accessToken !== null)
            ? exports.Token.fromPartial(object.accessToken)
            : undefined;
        return message;
    },
};
function createBasePairTokens() {
    return { accessToken: undefined, refreshToken: undefined };
}
exports.PairTokens = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = new wire_1.BinaryWriter(); }
        if (message.accessToken !== undefined) {
            exports.AccessToken.encode(message.accessToken, writer.uint32(10).fork()).join();
        }
        if (message.refreshToken !== undefined) {
            exports.RefreshToken.encode(message.refreshToken, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBasePairTokens();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.accessToken = exports.AccessToken.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.refreshToken = exports.RefreshToken.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            accessToken: isSet(object.accessToken) ? exports.AccessToken.fromJSON(object.accessToken) : undefined,
            refreshToken: isSet(object.refreshToken) ? exports.RefreshToken.fromJSON(object.refreshToken) : undefined,
        };
    },
    toJSON: function (message) {
        var obj = {};
        if (message.accessToken !== undefined) {
            obj.accessToken = exports.AccessToken.toJSON(message.accessToken);
        }
        if (message.refreshToken !== undefined) {
            obj.refreshToken = exports.RefreshToken.toJSON(message.refreshToken);
        }
        return obj;
    },
    create: function (base) {
        return exports.PairTokens.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial: function (object) {
        var message = createBasePairTokens();
        message.accessToken = (object.accessToken !== undefined && object.accessToken !== null)
            ? exports.AccessToken.fromPartial(object.accessToken)
            : undefined;
        message.refreshToken = (object.refreshToken !== undefined && object.refreshToken !== null)
            ? exports.RefreshToken.fromPartial(object.refreshToken)
            : undefined;
        return message;
    },
};
function createBaseNewPassword() {
    return { oldPassword: undefined, password: undefined };
}
exports.NewPassword = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = new wire_1.BinaryWriter(); }
        if (message.oldPassword !== undefined) {
            account_js_1.Password.encode(message.oldPassword, writer.uint32(10).fork()).join();
        }
        if (message.password !== undefined) {
            account_js_1.Password.encode(message.password, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseNewPassword();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.oldPassword = account_js_1.Password.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.password = account_js_1.Password.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            oldPassword: isSet(object.oldPassword) ? account_js_1.Password.fromJSON(object.oldPassword) : undefined,
            password: isSet(object.password) ? account_js_1.Password.fromJSON(object.password) : undefined,
        };
    },
    toJSON: function (message) {
        var obj = {};
        if (message.oldPassword !== undefined) {
            obj.oldPassword = account_js_1.Password.toJSON(message.oldPassword);
        }
        if (message.password !== undefined) {
            obj.password = account_js_1.Password.toJSON(message.password);
        }
        return obj;
    },
    create: function (base) {
        return exports.NewPassword.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial: function (object) {
        var message = createBaseNewPassword();
        message.oldPassword = (object.oldPassword !== undefined && object.oldPassword !== null)
            ? account_js_1.Password.fromPartial(object.oldPassword)
            : undefined;
        message.password = (object.password !== undefined && object.password !== null)
            ? account_js_1.Password.fromPartial(object.password)
            : undefined;
        return message;
    },
};
function createBaseNewEmail() {
    return { email: undefined };
}
exports.NewEmail = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = new wire_1.BinaryWriter(); }
        if (message.email !== undefined) {
            account_js_1.Email.encode(message.email, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseNewEmail();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.email = account_js_1.Email.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON: function (object) {
        return { email: isSet(object.email) ? account_js_1.Email.fromJSON(object.email) : undefined };
    },
    toJSON: function (message) {
        var obj = {};
        if (message.email !== undefined) {
            obj.email = account_js_1.Email.toJSON(message.email);
        }
        return obj;
    },
    create: function (base) {
        return exports.NewEmail.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial: function (object) {
        var message = createBaseNewEmail();
        message.email = (object.email !== undefined && object.email !== null) ? account_js_1.Email.fromPartial(object.email) : undefined;
        return message;
    },
};
function createBaseVerifyTokenResponse() {
    return { status: false, accountId: "" };
}
exports.VerifyTokenResponse = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = new wire_1.BinaryWriter(); }
        if (message.status !== false) {
            writer.uint32(8).bool(message.status);
        }
        if (message.accountId !== "") {
            writer.uint32(18).string(message.accountId);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseVerifyTokenResponse();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.status = reader.bool();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.accountId = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            status: isSet(object.status) ? globalThis.Boolean(object.status) : false,
            accountId: isSet(object.accountId) ? globalThis.String(object.accountId) : "",
        };
    },
    toJSON: function (message) {
        var obj = {};
        if (message.status !== false) {
            obj.status = message.status;
        }
        if (message.accountId !== "") {
            obj.accountId = message.accountId;
        }
        return obj;
    },
    create: function (base) {
        return exports.VerifyTokenResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial: function (object) {
        var _a, _b;
        var message = createBaseVerifyTokenResponse();
        message.status = (_a = object.status) !== null && _a !== void 0 ? _a : false;
        message.accountId = (_b = object.accountId) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function createBaseOTPRequest() {
    return { email: undefined, code: "" };
}
exports.OTPRequest = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = new wire_1.BinaryWriter(); }
        if (message.email !== undefined) {
            account_js_1.Email.encode(message.email, writer.uint32(10).fork()).join();
        }
        if (message.code !== "") {
            writer.uint32(18).string(message.code);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseOTPRequest();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.email = account_js_1.Email.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.code = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            email: isSet(object.email) ? account_js_1.Email.fromJSON(object.email) : undefined,
            code: isSet(object.code) ? globalThis.String(object.code) : "",
        };
    },
    toJSON: function (message) {
        var obj = {};
        if (message.email !== undefined) {
            obj.email = account_js_1.Email.toJSON(message.email);
        }
        if (message.code !== "") {
            obj.code = message.code;
        }
        return obj;
    },
    create: function (base) {
        return exports.OTPRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial: function (object) {
        var _a;
        var message = createBaseOTPRequest();
        message.email = (object.email !== undefined && object.email !== null) ? account_js_1.Email.fromPartial(object.email) : undefined;
        message.code = (_a = object.code) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseOTPResponse() {
    return { status: false };
}
exports.OTPResponse = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = new wire_1.BinaryWriter(); }
        if (message.status !== false) {
            writer.uint32(8).bool(message.status);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseOTPResponse();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.status = reader.bool();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON: function (object) {
        return { status: isSet(object.status) ? globalThis.Boolean(object.status) : false };
    },
    toJSON: function (message) {
        var obj = {};
        if (message.status !== false) {
            obj.status = message.status;
        }
        return obj;
    },
    create: function (base) {
        return exports.OTPResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial: function (object) {
        var _a;
        var message = createBaseOTPResponse();
        message.status = (_a = object.status) !== null && _a !== void 0 ? _a : false;
        return message;
    },
};
function createBaseRestorePasswordRequest() {
    return { email: undefined, newPassword: undefined };
}
exports.RestorePasswordRequest = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = new wire_1.BinaryWriter(); }
        if (message.email !== undefined) {
            account_js_1.Email.encode(message.email, writer.uint32(10).fork()).join();
        }
        if (message.newPassword !== undefined) {
            account_js_1.Password.encode(message.newPassword, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseRestorePasswordRequest();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.email = account_js_1.Email.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.newPassword = account_js_1.Password.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            email: isSet(object.email) ? account_js_1.Email.fromJSON(object.email) : undefined,
            newPassword: isSet(object.newPassword) ? account_js_1.Password.fromJSON(object.newPassword) : undefined,
        };
    },
    toJSON: function (message) {
        var obj = {};
        if (message.email !== undefined) {
            obj.email = account_js_1.Email.toJSON(message.email);
        }
        if (message.newPassword !== undefined) {
            obj.newPassword = account_js_1.Password.toJSON(message.newPassword);
        }
        return obj;
    },
    create: function (base) {
        return exports.RestorePasswordRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial: function (object) {
        var message = createBaseRestorePasswordRequest();
        message.email = (object.email !== undefined && object.email !== null) ? account_js_1.Email.fromPartial(object.email) : undefined;
        message.newPassword = (object.newPassword !== undefined && object.newPassword !== null)
            ? account_js_1.Password.fromPartial(object.newPassword)
            : undefined;
        return message;
    },
};
function createBaseSendOTPRequest() {
    return { email: undefined };
}
exports.SendOTPRequest = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = new wire_1.BinaryWriter(); }
        if (message.email !== undefined) {
            account_js_1.Email.encode(message.email, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseSendOTPRequest();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.email = account_js_1.Email.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON: function (object) {
        return { email: isSet(object.email) ? account_js_1.Email.fromJSON(object.email) : undefined };
    },
    toJSON: function (message) {
        var obj = {};
        if (message.email !== undefined) {
            obj.email = account_js_1.Email.toJSON(message.email);
        }
        return obj;
    },
    create: function (base) {
        return exports.SendOTPRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial: function (object) {
        var message = createBaseSendOTPRequest();
        message.email = (object.email !== undefined && object.email !== null) ? account_js_1.Email.fromPartial(object.email) : undefined;
        return message;
    },
};
function createBaseTokensWithUserInfo() {
    return { accessToken: undefined, refreshToken: undefined, account: undefined };
}
exports.TokensWithUserInfo = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = new wire_1.BinaryWriter(); }
        if (message.accessToken !== undefined) {
            exports.AccessToken.encode(message.accessToken, writer.uint32(10).fork()).join();
        }
        if (message.refreshToken !== undefined) {
            exports.RefreshToken.encode(message.refreshToken, writer.uint32(18).fork()).join();
        }
        if (message.account !== undefined) {
            account_js_1.AccountInfo.encode(message.account, writer.uint32(26).fork()).join();
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseTokensWithUserInfo();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.accessToken = exports.AccessToken.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.refreshToken = exports.RefreshToken.decode(reader, reader.uint32());
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.account = account_js_1.AccountInfo.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            accessToken: isSet(object.accessToken) ? exports.AccessToken.fromJSON(object.accessToken) : undefined,
            refreshToken: isSet(object.refreshToken) ? exports.RefreshToken.fromJSON(object.refreshToken) : undefined,
            account: isSet(object.account) ? account_js_1.AccountInfo.fromJSON(object.account) : undefined,
        };
    },
    toJSON: function (message) {
        var obj = {};
        if (message.accessToken !== undefined) {
            obj.accessToken = exports.AccessToken.toJSON(message.accessToken);
        }
        if (message.refreshToken !== undefined) {
            obj.refreshToken = exports.RefreshToken.toJSON(message.refreshToken);
        }
        if (message.account !== undefined) {
            obj.account = account_js_1.AccountInfo.toJSON(message.account);
        }
        return obj;
    },
    create: function (base) {
        return exports.TokensWithUserInfo.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial: function (object) {
        var message = createBaseTokensWithUserInfo();
        message.accessToken = (object.accessToken !== undefined && object.accessToken !== null)
            ? exports.AccessToken.fromPartial(object.accessToken)
            : undefined;
        message.refreshToken = (object.refreshToken !== undefined && object.refreshToken !== null)
            ? exports.RefreshToken.fromPartial(object.refreshToken)
            : undefined;
        message.account = (object.account !== undefined && object.account !== null)
            ? account_js_1.AccountInfo.fromPartial(object.account)
            : undefined;
        return message;
    },
};
exports.SSOServerServiceServiceName = "pb.SSOServerService";
var SSOServerServiceClientImpl = /** @class */ (function () {
    function SSOServerServiceClientImpl(rpc, opts) {
        this.service = (opts === null || opts === void 0 ? void 0 : opts.service) || exports.SSOServerServiceServiceName;
        this.rpc = rpc;
        this.SignUp = this.SignUp.bind(this);
        this.Login = this.Login.bind(this);
        this.VerifyToken = this.VerifyToken.bind(this);
        this.Logout = this.Logout.bind(this);
        this.RotateTokens = this.RotateTokens.bind(this);
        this.ChangePassword = this.ChangePassword.bind(this);
        this.ChangeEmail = this.ChangeEmail.bind(this);
        this.SendOTP = this.SendOTP.bind(this);
        this.CheckOTP = this.CheckOTP.bind(this);
        this.RestorePassword = this.RestorePassword.bind(this);
        this.LogoutFromDevices = this.LogoutFromDevices.bind(this);
    }
    SSOServerServiceClientImpl.prototype.SignUp = function (request) {
        var data = account_js_1.Account.encode(request).finish();
        var promise = this.rpc.request(this.service, "SignUp", data);
        return promise.then(function (data) { return exports.TokensWithUserInfo.decode(new wire_1.BinaryReader(data)); });
    };
    SSOServerServiceClientImpl.prototype.Login = function (request) {
        var data = exports.LoginData.encode(request).finish();
        var promise = this.rpc.request(this.service, "Login", data);
        return promise.then(function (data) { return exports.TokensWithUserInfo.decode(new wire_1.BinaryReader(data)); });
    };
    SSOServerServiceClientImpl.prototype.VerifyToken = function (request) {
        var data = exports.Token.encode(request).finish();
        var promise = this.rpc.request(this.service, "VerifyToken", data);
        return promise.then(function (data) { return exports.VerifyTokenResponse.decode(new wire_1.BinaryReader(data)); });
    };
    SSOServerServiceClientImpl.prototype.Logout = function (request) {
        var data = empty_js_1.Empty.encode(request).finish();
        var promise = this.rpc.request(this.service, "Logout", data);
        return promise.then(function (data) { return empty_js_1.Empty.decode(new wire_1.BinaryReader(data)); });
    };
    SSOServerServiceClientImpl.prototype.RotateTokens = function (request) {
        var data = exports.RefreshToken.encode(request).finish();
        var promise = this.rpc.request(this.service, "RotateTokens", data);
        return promise.then(function (data) { return exports.PairTokens.decode(new wire_1.BinaryReader(data)); });
    };
    SSOServerServiceClientImpl.prototype.ChangePassword = function (request) {
        var data = exports.NewPassword.encode(request).finish();
        var promise = this.rpc.request(this.service, "ChangePassword", data);
        return promise.then(function (data) { return exports.PairTokens.decode(new wire_1.BinaryReader(data)); });
    };
    SSOServerServiceClientImpl.prototype.ChangeEmail = function (request) {
        var data = exports.NewEmail.encode(request).finish();
        var promise = this.rpc.request(this.service, "ChangeEmail", data);
        return promise.then(function (data) { return exports.PairTokens.decode(new wire_1.BinaryReader(data)); });
    };
    SSOServerServiceClientImpl.prototype.SendOTP = function (request) {
        var data = exports.SendOTPRequest.encode(request).finish();
        var promise = this.rpc.request(this.service, "SendOTP", data);
        return promise.then(function (data) { return empty_js_1.Empty.decode(new wire_1.BinaryReader(data)); });
    };
    SSOServerServiceClientImpl.prototype.CheckOTP = function (request) {
        var data = exports.OTPRequest.encode(request).finish();
        var promise = this.rpc.request(this.service, "CheckOTP", data);
        return promise.then(function (data) { return exports.OTPResponse.decode(new wire_1.BinaryReader(data)); });
    };
    SSOServerServiceClientImpl.prototype.RestorePassword = function (request) {
        var data = exports.RestorePasswordRequest.encode(request).finish();
        var promise = this.rpc.request(this.service, "RestorePassword", data);
        return promise.then(function (data) { return exports.PairTokens.decode(new wire_1.BinaryReader(data)); });
    };
    SSOServerServiceClientImpl.prototype.LogoutFromDevices = function (request) {
        var data = empty_js_1.Empty.encode(request).finish();
        var promise = this.rpc.request(this.service, "LogoutFromDevices", data);
        return promise.then(function (data) { return empty_js_1.Empty.decode(new wire_1.BinaryReader(data)); });
    };
    return SSOServerServiceClientImpl;
}());
exports.SSOServerServiceClientImpl = SSOServerServiceClientImpl;
function isSet(value) {
    return value !== null && value !== undefined;
}
