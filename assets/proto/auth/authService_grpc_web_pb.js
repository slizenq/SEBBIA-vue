/**
 * @fileoverview gRPC-Web generated client stub for pb
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.5.0
// 	protoc              v5.28.2
// source: authService.proto


/* eslint-disable */
// @ts-nocheck



const grpc = {};
grpc.web = require('grpc-web');


var google_protobuf_empty_pb = require('google-protobuf/google/protobuf/empty_pb.js')

var account_pb = require('./account_pb.js')
const proto = {};
proto.pb = require('./authService_pb.js');

/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.pb.SSOServerServiceClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.pb.SSOServerServicePromiseClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.account.Account,
 *   !proto.pb.TokensWithUserInfo>}
 */
const methodDescriptor_SSOServerService_SignUp = new grpc.web.MethodDescriptor(
  '/pb.SSOServerService/SignUp',
  grpc.web.MethodType.UNARY,
  account_pb.Account,
  proto.pb.TokensWithUserInfo,
  /**
   * @param {!proto.account.Account} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.pb.TokensWithUserInfo.deserializeBinary
);


/**
 * @param {!proto.account.Account} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.pb.TokensWithUserInfo)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.pb.TokensWithUserInfo>|undefined}
 *     The XHR Node Readable Stream
 */
proto.pb.SSOServerServiceClient.prototype.signUp =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/pb.SSOServerService/SignUp',
      request,
      metadata || {},
      methodDescriptor_SSOServerService_SignUp,
      callback);
};


/**
 * @param {!proto.account.Account} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.pb.TokensWithUserInfo>}
 *     Promise that resolves to the response
 */
proto.pb.SSOServerServicePromiseClient.prototype.signUp =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/pb.SSOServerService/SignUp',
      request,
      metadata || {},
      methodDescriptor_SSOServerService_SignUp);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.pb.LoginData,
 *   !proto.pb.TokensWithUserInfo>}
 */
const methodDescriptor_SSOServerService_Login = new grpc.web.MethodDescriptor(
  '/pb.SSOServerService/Login',
  grpc.web.MethodType.UNARY,
  proto.pb.LoginData,
  proto.pb.TokensWithUserInfo,
  /**
   * @param {!proto.pb.LoginData} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.pb.TokensWithUserInfo.deserializeBinary
);


/**
 * @param {!proto.pb.LoginData} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.pb.TokensWithUserInfo)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.pb.TokensWithUserInfo>|undefined}
 *     The XHR Node Readable Stream
 */
proto.pb.SSOServerServiceClient.prototype.login =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/pb.SSOServerService/Login',
      request,
      metadata || {},
      methodDescriptor_SSOServerService_Login,
      callback);
};


/**
 * @param {!proto.pb.LoginData} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.pb.TokensWithUserInfo>}
 *     Promise that resolves to the response
 */
proto.pb.SSOServerServicePromiseClient.prototype.login =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/pb.SSOServerService/Login',
      request,
      metadata || {},
      methodDescriptor_SSOServerService_Login);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.pb.Token,
 *   !proto.pb.VerifyTokenResponse>}
 */
const methodDescriptor_SSOServerService_VerifyToken = new grpc.web.MethodDescriptor(
  '/pb.SSOServerService/VerifyToken',
  grpc.web.MethodType.UNARY,
  proto.pb.Token,
  proto.pb.VerifyTokenResponse,
  /**
   * @param {!proto.pb.Token} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.pb.VerifyTokenResponse.deserializeBinary
);


/**
 * @param {!proto.pb.Token} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.pb.VerifyTokenResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.pb.VerifyTokenResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.pb.SSOServerServiceClient.prototype.verifyToken =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/pb.SSOServerService/VerifyToken',
      request,
      metadata || {},
      methodDescriptor_SSOServerService_VerifyToken,
      callback);
};


/**
 * @param {!proto.pb.Token} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.pb.VerifyTokenResponse>}
 *     Promise that resolves to the response
 */
proto.pb.SSOServerServicePromiseClient.prototype.verifyToken =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/pb.SSOServerService/VerifyToken',
      request,
      metadata || {},
      methodDescriptor_SSOServerService_VerifyToken);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.google.protobuf.Empty,
 *   !proto.google.protobuf.Empty>}
 */
const methodDescriptor_SSOServerService_Logout = new grpc.web.MethodDescriptor(
  '/pb.SSOServerService/Logout',
  grpc.web.MethodType.UNARY,
  google_protobuf_empty_pb.Empty,
  google_protobuf_empty_pb.Empty,
  /**
   * @param {!proto.google.protobuf.Empty} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  google_protobuf_empty_pb.Empty.deserializeBinary
);


/**
 * @param {!proto.google.protobuf.Empty} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.google.protobuf.Empty)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.google.protobuf.Empty>|undefined}
 *     The XHR Node Readable Stream
 */
proto.pb.SSOServerServiceClient.prototype.logout =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/pb.SSOServerService/Logout',
      request,
      metadata || {},
      methodDescriptor_SSOServerService_Logout,
      callback);
};


/**
 * @param {!proto.google.protobuf.Empty} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.google.protobuf.Empty>}
 *     Promise that resolves to the response
 */
proto.pb.SSOServerServicePromiseClient.prototype.logout =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/pb.SSOServerService/Logout',
      request,
      metadata || {},
      methodDescriptor_SSOServerService_Logout);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.pb.RefreshToken,
 *   !proto.pb.PairTokens>}
 */
const methodDescriptor_SSOServerService_RotateTokens = new grpc.web.MethodDescriptor(
  '/pb.SSOServerService/RotateTokens',
  grpc.web.MethodType.UNARY,
  proto.pb.RefreshToken,
  proto.pb.PairTokens,
  /**
   * @param {!proto.pb.RefreshToken} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.pb.PairTokens.deserializeBinary
);


/**
 * @param {!proto.pb.RefreshToken} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.pb.PairTokens)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.pb.PairTokens>|undefined}
 *     The XHR Node Readable Stream
 */
proto.pb.SSOServerServiceClient.prototype.rotateTokens =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/pb.SSOServerService/RotateTokens',
      request,
      metadata || {},
      methodDescriptor_SSOServerService_RotateTokens,
      callback);
};


/**
 * @param {!proto.pb.RefreshToken} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.pb.PairTokens>}
 *     Promise that resolves to the response
 */
proto.pb.SSOServerServicePromiseClient.prototype.rotateTokens =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/pb.SSOServerService/RotateTokens',
      request,
      metadata || {},
      methodDescriptor_SSOServerService_RotateTokens);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.pb.NewPassword,
 *   !proto.pb.PairTokens>}
 */
const methodDescriptor_SSOServerService_ChangePassword = new grpc.web.MethodDescriptor(
  '/pb.SSOServerService/ChangePassword',
  grpc.web.MethodType.UNARY,
  proto.pb.NewPassword,
  proto.pb.PairTokens,
  /**
   * @param {!proto.pb.NewPassword} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.pb.PairTokens.deserializeBinary
);


/**
 * @param {!proto.pb.NewPassword} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.pb.PairTokens)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.pb.PairTokens>|undefined}
 *     The XHR Node Readable Stream
 */
proto.pb.SSOServerServiceClient.prototype.changePassword =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/pb.SSOServerService/ChangePassword',
      request,
      metadata || {},
      methodDescriptor_SSOServerService_ChangePassword,
      callback);
};


/**
 * @param {!proto.pb.NewPassword} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.pb.PairTokens>}
 *     Promise that resolves to the response
 */
proto.pb.SSOServerServicePromiseClient.prototype.changePassword =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/pb.SSOServerService/ChangePassword',
      request,
      metadata || {},
      methodDescriptor_SSOServerService_ChangePassword);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.pb.NewEmail,
 *   !proto.pb.PairTokens>}
 */
const methodDescriptor_SSOServerService_ChangeEmail = new grpc.web.MethodDescriptor(
  '/pb.SSOServerService/ChangeEmail',
  grpc.web.MethodType.UNARY,
  proto.pb.NewEmail,
  proto.pb.PairTokens,
  /**
   * @param {!proto.pb.NewEmail} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.pb.PairTokens.deserializeBinary
);


/**
 * @param {!proto.pb.NewEmail} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.pb.PairTokens)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.pb.PairTokens>|undefined}
 *     The XHR Node Readable Stream
 */
proto.pb.SSOServerServiceClient.prototype.changeEmail =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/pb.SSOServerService/ChangeEmail',
      request,
      metadata || {},
      methodDescriptor_SSOServerService_ChangeEmail,
      callback);
};


/**
 * @param {!proto.pb.NewEmail} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.pb.PairTokens>}
 *     Promise that resolves to the response
 */
proto.pb.SSOServerServicePromiseClient.prototype.changeEmail =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/pb.SSOServerService/ChangeEmail',
      request,
      metadata || {},
      methodDescriptor_SSOServerService_ChangeEmail);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.pb.SendOTPRequest,
 *   !proto.google.protobuf.Empty>}
 */
const methodDescriptor_SSOServerService_SendOTP = new grpc.web.MethodDescriptor(
  '/pb.SSOServerService/SendOTP',
  grpc.web.MethodType.UNARY,
  proto.pb.SendOTPRequest,
  google_protobuf_empty_pb.Empty,
  /**
   * @param {!proto.pb.SendOTPRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  google_protobuf_empty_pb.Empty.deserializeBinary
);


/**
 * @param {!proto.pb.SendOTPRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.google.protobuf.Empty)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.google.protobuf.Empty>|undefined}
 *     The XHR Node Readable Stream
 */
proto.pb.SSOServerServiceClient.prototype.sendOTP =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/pb.SSOServerService/SendOTP',
      request,
      metadata || {},
      methodDescriptor_SSOServerService_SendOTP,
      callback);
};


/**
 * @param {!proto.pb.SendOTPRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.google.protobuf.Empty>}
 *     Promise that resolves to the response
 */
proto.pb.SSOServerServicePromiseClient.prototype.sendOTP =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/pb.SSOServerService/SendOTP',
      request,
      metadata || {},
      methodDescriptor_SSOServerService_SendOTP);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.pb.OTPRequest,
 *   !proto.pb.OTPResponse>}
 */
const methodDescriptor_SSOServerService_CheckOTP = new grpc.web.MethodDescriptor(
  '/pb.SSOServerService/CheckOTP',
  grpc.web.MethodType.UNARY,
  proto.pb.OTPRequest,
  proto.pb.OTPResponse,
  /**
   * @param {!proto.pb.OTPRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.pb.OTPResponse.deserializeBinary
);


/**
 * @param {!proto.pb.OTPRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.pb.OTPResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.pb.OTPResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.pb.SSOServerServiceClient.prototype.checkOTP =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/pb.SSOServerService/CheckOTP',
      request,
      metadata || {},
      methodDescriptor_SSOServerService_CheckOTP,
      callback);
};


/**
 * @param {!proto.pb.OTPRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.pb.OTPResponse>}
 *     Promise that resolves to the response
 */
proto.pb.SSOServerServicePromiseClient.prototype.checkOTP =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/pb.SSOServerService/CheckOTP',
      request,
      metadata || {},
      methodDescriptor_SSOServerService_CheckOTP);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.pb.RestorePasswordRequest,
 *   !proto.pb.PairTokens>}
 */
const methodDescriptor_SSOServerService_RestorePassword = new grpc.web.MethodDescriptor(
  '/pb.SSOServerService/RestorePassword',
  grpc.web.MethodType.UNARY,
  proto.pb.RestorePasswordRequest,
  proto.pb.PairTokens,
  /**
   * @param {!proto.pb.RestorePasswordRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.pb.PairTokens.deserializeBinary
);


/**
 * @param {!proto.pb.RestorePasswordRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.pb.PairTokens)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.pb.PairTokens>|undefined}
 *     The XHR Node Readable Stream
 */
proto.pb.SSOServerServiceClient.prototype.restorePassword =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/pb.SSOServerService/RestorePassword',
      request,
      metadata || {},
      methodDescriptor_SSOServerService_RestorePassword,
      callback);
};


/**
 * @param {!proto.pb.RestorePasswordRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.pb.PairTokens>}
 *     Promise that resolves to the response
 */
proto.pb.SSOServerServicePromiseClient.prototype.restorePassword =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/pb.SSOServerService/RestorePassword',
      request,
      metadata || {},
      methodDescriptor_SSOServerService_RestorePassword);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.google.protobuf.Empty,
 *   !proto.google.protobuf.Empty>}
 */
const methodDescriptor_SSOServerService_LogoutFromDevices = new grpc.web.MethodDescriptor(
  '/pb.SSOServerService/LogoutFromDevices',
  grpc.web.MethodType.UNARY,
  google_protobuf_empty_pb.Empty,
  google_protobuf_empty_pb.Empty,
  /**
   * @param {!proto.google.protobuf.Empty} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  google_protobuf_empty_pb.Empty.deserializeBinary
);


/**
 * @param {!proto.google.protobuf.Empty} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.google.protobuf.Empty)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.google.protobuf.Empty>|undefined}
 *     The XHR Node Readable Stream
 */
proto.pb.SSOServerServiceClient.prototype.logoutFromDevices =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/pb.SSOServerService/LogoutFromDevices',
      request,
      metadata || {},
      methodDescriptor_SSOServerService_LogoutFromDevices,
      callback);
};


/**
 * @param {!proto.google.protobuf.Empty} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.google.protobuf.Empty>}
 *     Promise that resolves to the response
 */
proto.pb.SSOServerServicePromiseClient.prototype.logoutFromDevices =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/pb.SSOServerService/LogoutFromDevices',
      request,
      metadata || {},
      methodDescriptor_SSOServerService_LogoutFromDevices);
};


module.exports = proto.pb;

