// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.5
//   protoc               v5.28.2
// source: assets/proto/resume/resume.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Empty } from "../../../google/protobuf/empty.js";

export const protobufPackage = "resume";

export interface Skill {
  skill: string;
}

export interface Resume {
  resumeId: string;
  aboutMe: string;
  skills: Skill[];
  direction: string;
  aboutProjects: string;
  portfolio: string;
}

export interface CreateResumeReq {
  aboutMe: string;
  skills: Skill[];
  direction: string;
  aboutProjects: string;
  portfolio: string;
}

export interface ResumeResponse {
  resume: Resume | undefined;
}

export interface ChangeResumeReq {
  resumeId?: string | undefined;
  aboutMe?: string | undefined;
  skills: Skill[];
  direction?: string | undefined;
  aboutProjects?: string | undefined;
  portfolio?: string | undefined;
}

export interface GetResumeByIdReq {
  resumeId: string;
}

function createBaseSkill(): Skill {
  return { skill: "" };
}

export const Skill: MessageFns<Skill> = {
  encode(message: Skill, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.skill !== "") {
      writer.uint32(10).string(message.skill);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Skill {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSkill();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.skill = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Skill {
    return { skill: isSet(object.skill) ? globalThis.String(object.skill) : "" };
  },

  toJSON(message: Skill): unknown {
    const obj: any = {};
    if (message.skill !== "") {
      obj.skill = message.skill;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Skill>, I>>(base?: I): Skill {
    return Skill.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Skill>, I>>(object: I): Skill {
    const message = createBaseSkill();
    message.skill = object.skill ?? "";
    return message;
  },
};

function createBaseResume(): Resume {
  return { resumeId: "", aboutMe: "", skills: [], direction: "", aboutProjects: "", portfolio: "" };
}

export const Resume: MessageFns<Resume> = {
  encode(message: Resume, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.resumeId !== "") {
      writer.uint32(10).string(message.resumeId);
    }
    if (message.aboutMe !== "") {
      writer.uint32(18).string(message.aboutMe);
    }
    for (const v of message.skills) {
      Skill.encode(v!, writer.uint32(26).fork()).join();
    }
    if (message.direction !== "") {
      writer.uint32(34).string(message.direction);
    }
    if (message.aboutProjects !== "") {
      writer.uint32(42).string(message.aboutProjects);
    }
    if (message.portfolio !== "") {
      writer.uint32(50).string(message.portfolio);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Resume {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResume();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.resumeId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.aboutMe = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.skills.push(Skill.decode(reader, reader.uint32()));
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.direction = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.aboutProjects = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.portfolio = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Resume {
    return {
      resumeId: isSet(object.resumeId) ? globalThis.String(object.resumeId) : "",
      aboutMe: isSet(object.aboutMe) ? globalThis.String(object.aboutMe) : "",
      skills: globalThis.Array.isArray(object?.skills) ? object.skills.map((e: any) => Skill.fromJSON(e)) : [],
      direction: isSet(object.direction) ? globalThis.String(object.direction) : "",
      aboutProjects: isSet(object.aboutProjects) ? globalThis.String(object.aboutProjects) : "",
      portfolio: isSet(object.portfolio) ? globalThis.String(object.portfolio) : "",
    };
  },

  toJSON(message: Resume): unknown {
    const obj: any = {};
    if (message.resumeId !== "") {
      obj.resumeId = message.resumeId;
    }
    if (message.aboutMe !== "") {
      obj.aboutMe = message.aboutMe;
    }
    if (message.skills?.length) {
      obj.skills = message.skills.map((e) => Skill.toJSON(e));
    }
    if (message.direction !== "") {
      obj.direction = message.direction;
    }
    if (message.aboutProjects !== "") {
      obj.aboutProjects = message.aboutProjects;
    }
    if (message.portfolio !== "") {
      obj.portfolio = message.portfolio;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Resume>, I>>(base?: I): Resume {
    return Resume.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Resume>, I>>(object: I): Resume {
    const message = createBaseResume();
    message.resumeId = object.resumeId ?? "";
    message.aboutMe = object.aboutMe ?? "";
    message.skills = object.skills?.map((e) => Skill.fromPartial(e)) || [];
    message.direction = object.direction ?? "";
    message.aboutProjects = object.aboutProjects ?? "";
    message.portfolio = object.portfolio ?? "";
    return message;
  },
};

function createBaseCreateResumeReq(): CreateResumeReq {
  return { aboutMe: "", skills: [], direction: "", aboutProjects: "", portfolio: "" };
}

export const CreateResumeReq: MessageFns<CreateResumeReq> = {
  encode(message: CreateResumeReq, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.aboutMe !== "") {
      writer.uint32(10).string(message.aboutMe);
    }
    for (const v of message.skills) {
      Skill.encode(v!, writer.uint32(18).fork()).join();
    }
    if (message.direction !== "") {
      writer.uint32(26).string(message.direction);
    }
    if (message.aboutProjects !== "") {
      writer.uint32(34).string(message.aboutProjects);
    }
    if (message.portfolio !== "") {
      writer.uint32(42).string(message.portfolio);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateResumeReq {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateResumeReq();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.aboutMe = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.skills.push(Skill.decode(reader, reader.uint32()));
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.direction = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.aboutProjects = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.portfolio = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateResumeReq {
    return {
      aboutMe: isSet(object.aboutMe) ? globalThis.String(object.aboutMe) : "",
      skills: globalThis.Array.isArray(object?.skills) ? object.skills.map((e: any) => Skill.fromJSON(e)) : [],
      direction: isSet(object.direction) ? globalThis.String(object.direction) : "",
      aboutProjects: isSet(object.aboutProjects) ? globalThis.String(object.aboutProjects) : "",
      portfolio: isSet(object.portfolio) ? globalThis.String(object.portfolio) : "",
    };
  },

  toJSON(message: CreateResumeReq): unknown {
    const obj: any = {};
    if (message.aboutMe !== "") {
      obj.aboutMe = message.aboutMe;
    }
    if (message.skills?.length) {
      obj.skills = message.skills.map((e) => Skill.toJSON(e));
    }
    if (message.direction !== "") {
      obj.direction = message.direction;
    }
    if (message.aboutProjects !== "") {
      obj.aboutProjects = message.aboutProjects;
    }
    if (message.portfolio !== "") {
      obj.portfolio = message.portfolio;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreateResumeReq>, I>>(base?: I): CreateResumeReq {
    return CreateResumeReq.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreateResumeReq>, I>>(object: I): CreateResumeReq {
    const message = createBaseCreateResumeReq();
    message.aboutMe = object.aboutMe ?? "";
    message.skills = object.skills?.map((e) => Skill.fromPartial(e)) || [];
    message.direction = object.direction ?? "";
    message.aboutProjects = object.aboutProjects ?? "";
    message.portfolio = object.portfolio ?? "";
    return message;
  },
};

function createBaseResumeResponse(): ResumeResponse {
  return { resume: undefined };
}

export const ResumeResponse: MessageFns<ResumeResponse> = {
  encode(message: ResumeResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.resume !== undefined) {
      Resume.encode(message.resume, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ResumeResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResumeResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.resume = Resume.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ResumeResponse {
    return { resume: isSet(object.resume) ? Resume.fromJSON(object.resume) : undefined };
  },

  toJSON(message: ResumeResponse): unknown {
    const obj: any = {};
    if (message.resume !== undefined) {
      obj.resume = Resume.toJSON(message.resume);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ResumeResponse>, I>>(base?: I): ResumeResponse {
    return ResumeResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ResumeResponse>, I>>(object: I): ResumeResponse {
    const message = createBaseResumeResponse();
    message.resume = (object.resume !== undefined && object.resume !== null)
      ? Resume.fromPartial(object.resume)
      : undefined;
    return message;
  },
};

function createBaseChangeResumeReq(): ChangeResumeReq {
  return {
    resumeId: undefined,
    aboutMe: undefined,
    skills: [],
    direction: undefined,
    aboutProjects: undefined,
    portfolio: undefined,
  };
}

export const ChangeResumeReq: MessageFns<ChangeResumeReq> = {
  encode(message: ChangeResumeReq, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.resumeId !== undefined) {
      writer.uint32(10).string(message.resumeId);
    }
    if (message.aboutMe !== undefined) {
      writer.uint32(18).string(message.aboutMe);
    }
    for (const v of message.skills) {
      Skill.encode(v!, writer.uint32(26).fork()).join();
    }
    if (message.direction !== undefined) {
      writer.uint32(34).string(message.direction);
    }
    if (message.aboutProjects !== undefined) {
      writer.uint32(42).string(message.aboutProjects);
    }
    if (message.portfolio !== undefined) {
      writer.uint32(50).string(message.portfolio);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ChangeResumeReq {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseChangeResumeReq();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.resumeId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.aboutMe = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.skills.push(Skill.decode(reader, reader.uint32()));
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.direction = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.aboutProjects = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.portfolio = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ChangeResumeReq {
    return {
      resumeId: isSet(object.resumeId) ? globalThis.String(object.resumeId) : undefined,
      aboutMe: isSet(object.aboutMe) ? globalThis.String(object.aboutMe) : undefined,
      skills: globalThis.Array.isArray(object?.skills) ? object.skills.map((e: any) => Skill.fromJSON(e)) : [],
      direction: isSet(object.direction) ? globalThis.String(object.direction) : undefined,
      aboutProjects: isSet(object.aboutProjects) ? globalThis.String(object.aboutProjects) : undefined,
      portfolio: isSet(object.portfolio) ? globalThis.String(object.portfolio) : undefined,
    };
  },

  toJSON(message: ChangeResumeReq): unknown {
    const obj: any = {};
    if (message.resumeId !== undefined) {
      obj.resumeId = message.resumeId;
    }
    if (message.aboutMe !== undefined) {
      obj.aboutMe = message.aboutMe;
    }
    if (message.skills?.length) {
      obj.skills = message.skills.map((e) => Skill.toJSON(e));
    }
    if (message.direction !== undefined) {
      obj.direction = message.direction;
    }
    if (message.aboutProjects !== undefined) {
      obj.aboutProjects = message.aboutProjects;
    }
    if (message.portfolio !== undefined) {
      obj.portfolio = message.portfolio;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ChangeResumeReq>, I>>(base?: I): ChangeResumeReq {
    return ChangeResumeReq.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ChangeResumeReq>, I>>(object: I): ChangeResumeReq {
    const message = createBaseChangeResumeReq();
    message.resumeId = object.resumeId ?? undefined;
    message.aboutMe = object.aboutMe ?? undefined;
    message.skills = object.skills?.map((e) => Skill.fromPartial(e)) || [];
    message.direction = object.direction ?? undefined;
    message.aboutProjects = object.aboutProjects ?? undefined;
    message.portfolio = object.portfolio ?? undefined;
    return message;
  },
};

function createBaseGetResumeByIdReq(): GetResumeByIdReq {
  return { resumeId: "" };
}

export const GetResumeByIdReq: MessageFns<GetResumeByIdReq> = {
  encode(message: GetResumeByIdReq, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.resumeId !== "") {
      writer.uint32(10).string(message.resumeId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetResumeByIdReq {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetResumeByIdReq();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.resumeId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetResumeByIdReq {
    return { resumeId: isSet(object.resumeId) ? globalThis.String(object.resumeId) : "" };
  },

  toJSON(message: GetResumeByIdReq): unknown {
    const obj: any = {};
    if (message.resumeId !== "") {
      obj.resumeId = message.resumeId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetResumeByIdReq>, I>>(base?: I): GetResumeByIdReq {
    return GetResumeByIdReq.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetResumeByIdReq>, I>>(object: I): GetResumeByIdReq {
    const message = createBaseGetResumeByIdReq();
    message.resumeId = object.resumeId ?? "";
    return message;
  },
};

export interface ResumeService {
  CreateResume(request: CreateResumeReq): Promise<ResumeResponse>;
  ChangeResume(request: ChangeResumeReq): Promise<ResumeResponse>;
  GetResumeByAccountId(request: Empty): Promise<ResumeResponse>;
  GetResumeById(request: GetResumeByIdReq): Promise<ResumeResponse>;
}

export const ResumeServiceServiceName = "resume.ResumeService";
export class ResumeServiceClientImpl implements ResumeService {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || ResumeServiceServiceName;
    this.rpc = rpc;
    this.CreateResume = this.CreateResume.bind(this);
    this.ChangeResume = this.ChangeResume.bind(this);
    this.GetResumeByAccountId = this.GetResumeByAccountId.bind(this);
    this.GetResumeById = this.GetResumeById.bind(this);
  }
  CreateResume(request: CreateResumeReq): Promise<ResumeResponse> {
    const data = CreateResumeReq.encode(request).finish();
    const promise = this.rpc.request(this.service, "CreateResume", data);
    return promise.then((data) => ResumeResponse.decode(new BinaryReader(data)));
  }

  ChangeResume(request: ChangeResumeReq): Promise<ResumeResponse> {
    const data = ChangeResumeReq.encode(request).finish();
    const promise = this.rpc.request(this.service, "ChangeResume", data);
    return promise.then((data) => ResumeResponse.decode(new BinaryReader(data)));
  }

  GetResumeByAccountId(request: Empty): Promise<ResumeResponse> {
    const data = Empty.encode(request).finish();
    const promise = this.rpc.request(this.service, "GetResumeByAccountId", data);
    return promise.then((data) => ResumeResponse.decode(new BinaryReader(data)));
  }

  GetResumeById(request: GetResumeByIdReq): Promise<ResumeResponse> {
    const data = GetResumeByIdReq.encode(request).finish();
    const promise = this.rpc.request(this.service, "GetResumeById", data);
    return promise.then((data) => ResumeResponse.decode(new BinaryReader(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
