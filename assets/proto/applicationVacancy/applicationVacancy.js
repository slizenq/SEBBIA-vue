"use strict";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.4
//   protoc               v5.28.2
// source: assets/proto/applicationVacancy/applicationVacancy.proto
Object.defineProperty(exports, "__esModule", { value: true });
exports.ApplicationVacancyServiceClientImpl = exports.ApplicationVacancyServiceServiceName = exports.GetApplicationsVacancyByVacancyIdRes = exports.GetApplicationsVacancyByVacancyIdReq = exports.GetApplicationVacancyByIdRes = exports.GetApplicationVacancyByIdReq = exports.GetApplicationsVacanciesReq = exports.RejectApplicationVacancyReq = exports.AcceptApplicationVacancyReq = exports.ReviewApplicationVacancyReq = exports.CreateApplicationVacancyRes = exports.CreateApplicationVacancyReq = exports.ApplicationVacancy = exports.ApplicationVacancyStatus = exports.protobufPackage = void 0;
exports.applicationVacancyStatusFromJSON = applicationVacancyStatusFromJSON;
exports.applicationVacancyStatusToJSON = applicationVacancyStatusToJSON;
/* eslint-disable */
var wire_1 = require("@bufbuild/protobuf/wire");
var empty_js_1 = require("../../../google/protobuf/empty.js");
exports.protobufPackage = "pb";
var ApplicationVacancyStatus;
(function (ApplicationVacancyStatus) {
    ApplicationVacancyStatus[ApplicationVacancyStatus["UNREVIEWED"] = 0] = "UNREVIEWED";
    ApplicationVacancyStatus[ApplicationVacancyStatus["REVIEWED"] = 1] = "REVIEWED";
    ApplicationVacancyStatus[ApplicationVacancyStatus["ACCEPTED"] = 2] = "ACCEPTED";
    ApplicationVacancyStatus[ApplicationVacancyStatus["REJECTED"] = 3] = "REJECTED";
    ApplicationVacancyStatus[ApplicationVacancyStatus["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(ApplicationVacancyStatus || (exports.ApplicationVacancyStatus = ApplicationVacancyStatus = {}));
function applicationVacancyStatusFromJSON(object) {
    switch (object) {
        case 0:
        case "UNREVIEWED":
            return ApplicationVacancyStatus.UNREVIEWED;
        case 1:
        case "REVIEWED":
            return ApplicationVacancyStatus.REVIEWED;
        case 2:
        case "ACCEPTED":
            return ApplicationVacancyStatus.ACCEPTED;
        case 3:
        case "REJECTED":
            return ApplicationVacancyStatus.REJECTED;
        case -1:
        case "UNRECOGNIZED":
        default:
            return ApplicationVacancyStatus.UNRECOGNIZED;
    }
}
function applicationVacancyStatusToJSON(object) {
    switch (object) {
        case ApplicationVacancyStatus.UNREVIEWED:
            return "UNREVIEWED";
        case ApplicationVacancyStatus.REVIEWED:
            return "REVIEWED";
        case ApplicationVacancyStatus.ACCEPTED:
            return "ACCEPTED";
        case ApplicationVacancyStatus.REJECTED:
            return "REJECTED";
        case ApplicationVacancyStatus.UNRECOGNIZED:
        default:
            return "UNRECOGNIZED";
    }
}
function createBaseApplicationVacancy() {
    return { Id: "", resumeId: "", vacancyId: "", status: 0 };
}
exports.ApplicationVacancy = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = new wire_1.BinaryWriter(); }
        if (message.Id !== "") {
            writer.uint32(10).string(message.Id);
        }
        if (message.resumeId !== "") {
            writer.uint32(18).string(message.resumeId);
        }
        if (message.vacancyId !== "") {
            writer.uint32(26).string(message.vacancyId);
        }
        if (message.status !== 0) {
            writer.uint32(32).int32(message.status);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseApplicationVacancy();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.Id = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.resumeId = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.vacancyId = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.status = reader.int32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            Id: isSet(object.Id) ? globalThis.String(object.Id) : "",
            resumeId: isSet(object.resumeId) ? globalThis.String(object.resumeId) : "",
            vacancyId: isSet(object.vacancyId) ? globalThis.String(object.vacancyId) : "",
            status: isSet(object.status) ? applicationVacancyStatusFromJSON(object.status) : 0,
        };
    },
    toJSON: function (message) {
        var obj = {};
        if (message.Id !== "") {
            obj.Id = message.Id;
        }
        if (message.resumeId !== "") {
            obj.resumeId = message.resumeId;
        }
        if (message.vacancyId !== "") {
            obj.vacancyId = message.vacancyId;
        }
        if (message.status !== 0) {
            obj.status = applicationVacancyStatusToJSON(message.status);
        }
        return obj;
    },
    create: function (base) {
        return exports.ApplicationVacancy.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial: function (object) {
        var _a, _b, _c, _d;
        var message = createBaseApplicationVacancy();
        message.Id = (_a = object.Id) !== null && _a !== void 0 ? _a : "";
        message.resumeId = (_b = object.resumeId) !== null && _b !== void 0 ? _b : "";
        message.vacancyId = (_c = object.vacancyId) !== null && _c !== void 0 ? _c : "";
        message.status = (_d = object.status) !== null && _d !== void 0 ? _d : 0;
        return message;
    },
};
function createBaseCreateApplicationVacancyReq() {
    return { resumeId: "", vacancyId: "" };
}
exports.CreateApplicationVacancyReq = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = new wire_1.BinaryWriter(); }
        if (message.resumeId !== "") {
            writer.uint32(10).string(message.resumeId);
        }
        if (message.vacancyId !== "") {
            writer.uint32(18).string(message.vacancyId);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseCreateApplicationVacancyReq();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.resumeId = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.vacancyId = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            resumeId: isSet(object.resumeId) ? globalThis.String(object.resumeId) : "",
            vacancyId: isSet(object.vacancyId) ? globalThis.String(object.vacancyId) : "",
        };
    },
    toJSON: function (message) {
        var obj = {};
        if (message.resumeId !== "") {
            obj.resumeId = message.resumeId;
        }
        if (message.vacancyId !== "") {
            obj.vacancyId = message.vacancyId;
        }
        return obj;
    },
    create: function (base) {
        return exports.CreateApplicationVacancyReq.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial: function (object) {
        var _a, _b;
        var message = createBaseCreateApplicationVacancyReq();
        message.resumeId = (_a = object.resumeId) !== null && _a !== void 0 ? _a : "";
        message.vacancyId = (_b = object.vacancyId) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function createBaseCreateApplicationVacancyRes() {
    return { applicationVacancyId: "" };
}
exports.CreateApplicationVacancyRes = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = new wire_1.BinaryWriter(); }
        if (message.applicationVacancyId !== "") {
            writer.uint32(10).string(message.applicationVacancyId);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseCreateApplicationVacancyRes();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.applicationVacancyId = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            applicationVacancyId: isSet(object.applicationVacancyId) ? globalThis.String(object.applicationVacancyId) : "",
        };
    },
    toJSON: function (message) {
        var obj = {};
        if (message.applicationVacancyId !== "") {
            obj.applicationVacancyId = message.applicationVacancyId;
        }
        return obj;
    },
    create: function (base) {
        return exports.CreateApplicationVacancyRes.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial: function (object) {
        var _a;
        var message = createBaseCreateApplicationVacancyRes();
        message.applicationVacancyId = (_a = object.applicationVacancyId) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseReviewApplicationVacancyReq() {
    return { applicationVacancyId: "" };
}
exports.ReviewApplicationVacancyReq = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = new wire_1.BinaryWriter(); }
        if (message.applicationVacancyId !== "") {
            writer.uint32(10).string(message.applicationVacancyId);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseReviewApplicationVacancyReq();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.applicationVacancyId = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            applicationVacancyId: isSet(object.applicationVacancyId) ? globalThis.String(object.applicationVacancyId) : "",
        };
    },
    toJSON: function (message) {
        var obj = {};
        if (message.applicationVacancyId !== "") {
            obj.applicationVacancyId = message.applicationVacancyId;
        }
        return obj;
    },
    create: function (base) {
        return exports.ReviewApplicationVacancyReq.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial: function (object) {
        var _a;
        var message = createBaseReviewApplicationVacancyReq();
        message.applicationVacancyId = (_a = object.applicationVacancyId) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseAcceptApplicationVacancyReq() {
    return { applicationVacancyId: "" };
}
exports.AcceptApplicationVacancyReq = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = new wire_1.BinaryWriter(); }
        if (message.applicationVacancyId !== "") {
            writer.uint32(10).string(message.applicationVacancyId);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseAcceptApplicationVacancyReq();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.applicationVacancyId = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            applicationVacancyId: isSet(object.applicationVacancyId) ? globalThis.String(object.applicationVacancyId) : "",
        };
    },
    toJSON: function (message) {
        var obj = {};
        if (message.applicationVacancyId !== "") {
            obj.applicationVacancyId = message.applicationVacancyId;
        }
        return obj;
    },
    create: function (base) {
        return exports.AcceptApplicationVacancyReq.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial: function (object) {
        var _a;
        var message = createBaseAcceptApplicationVacancyReq();
        message.applicationVacancyId = (_a = object.applicationVacancyId) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseRejectApplicationVacancyReq() {
    return { applicationVacancyId: "" };
}
exports.RejectApplicationVacancyReq = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = new wire_1.BinaryWriter(); }
        if (message.applicationVacancyId !== "") {
            writer.uint32(10).string(message.applicationVacancyId);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseRejectApplicationVacancyReq();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.applicationVacancyId = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            applicationVacancyId: isSet(object.applicationVacancyId) ? globalThis.String(object.applicationVacancyId) : "",
        };
    },
    toJSON: function (message) {
        var obj = {};
        if (message.applicationVacancyId !== "") {
            obj.applicationVacancyId = message.applicationVacancyId;
        }
        return obj;
    },
    create: function (base) {
        return exports.RejectApplicationVacancyReq.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial: function (object) {
        var _a;
        var message = createBaseRejectApplicationVacancyReq();
        message.applicationVacancyId = (_a = object.applicationVacancyId) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseGetApplicationsVacanciesReq() {
    return {};
}
exports.GetApplicationsVacanciesReq = {
    encode: function (_, writer) {
        if (writer === void 0) { writer = new wire_1.BinaryWriter(); }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseGetApplicationsVacanciesReq();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON: function (_) {
        return {};
    },
    toJSON: function (_) {
        var obj = {};
        return obj;
    },
    create: function (base) {
        return exports.GetApplicationsVacanciesReq.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial: function (_) {
        var message = createBaseGetApplicationsVacanciesReq();
        return message;
    },
};
function createBaseGetApplicationVacancyByIdReq() {
    return { applicationVacancyId: "" };
}
exports.GetApplicationVacancyByIdReq = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = new wire_1.BinaryWriter(); }
        if (message.applicationVacancyId !== "") {
            writer.uint32(10).string(message.applicationVacancyId);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseGetApplicationVacancyByIdReq();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.applicationVacancyId = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            applicationVacancyId: isSet(object.applicationVacancyId) ? globalThis.String(object.applicationVacancyId) : "",
        };
    },
    toJSON: function (message) {
        var obj = {};
        if (message.applicationVacancyId !== "") {
            obj.applicationVacancyId = message.applicationVacancyId;
        }
        return obj;
    },
    create: function (base) {
        return exports.GetApplicationVacancyByIdReq.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial: function (object) {
        var _a;
        var message = createBaseGetApplicationVacancyByIdReq();
        message.applicationVacancyId = (_a = object.applicationVacancyId) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseGetApplicationVacancyByIdRes() {
    return { applicationVacancy: undefined };
}
exports.GetApplicationVacancyByIdRes = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = new wire_1.BinaryWriter(); }
        if (message.applicationVacancy !== undefined) {
            exports.ApplicationVacancy.encode(message.applicationVacancy, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseGetApplicationVacancyByIdRes();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.applicationVacancy = exports.ApplicationVacancy.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            applicationVacancy: isSet(object.applicationVacancy)
                ? exports.ApplicationVacancy.fromJSON(object.applicationVacancy)
                : undefined,
        };
    },
    toJSON: function (message) {
        var obj = {};
        if (message.applicationVacancy !== undefined) {
            obj.applicationVacancy = exports.ApplicationVacancy.toJSON(message.applicationVacancy);
        }
        return obj;
    },
    create: function (base) {
        return exports.GetApplicationVacancyByIdRes.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial: function (object) {
        var message = createBaseGetApplicationVacancyByIdRes();
        message.applicationVacancy = (object.applicationVacancy !== undefined && object.applicationVacancy !== null)
            ? exports.ApplicationVacancy.fromPartial(object.applicationVacancy)
            : undefined;
        return message;
    },
};
function createBaseGetApplicationsVacancyByVacancyIdReq() {
    return { vacancyId: "" };
}
exports.GetApplicationsVacancyByVacancyIdReq = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = new wire_1.BinaryWriter(); }
        if (message.vacancyId !== "") {
            writer.uint32(10).string(message.vacancyId);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseGetApplicationsVacancyByVacancyIdReq();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.vacancyId = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON: function (object) {
        return { vacancyId: isSet(object.vacancyId) ? globalThis.String(object.vacancyId) : "" };
    },
    toJSON: function (message) {
        var obj = {};
        if (message.vacancyId !== "") {
            obj.vacancyId = message.vacancyId;
        }
        return obj;
    },
    create: function (base) {
        return exports.GetApplicationsVacancyByVacancyIdReq.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial: function (object) {
        var _a;
        var message = createBaseGetApplicationsVacancyByVacancyIdReq();
        message.vacancyId = (_a = object.vacancyId) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseGetApplicationsVacancyByVacancyIdRes() {
    return { applicationsVacancy: [] };
}
exports.GetApplicationsVacancyByVacancyIdRes = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = new wire_1.BinaryWriter(); }
        for (var _i = 0, _a = message.applicationsVacancy; _i < _a.length; _i++) {
            var v = _a[_i];
            exports.ApplicationVacancy.encode(v, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseGetApplicationsVacancyByVacancyIdRes();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.applicationsVacancy.push(exports.ApplicationVacancy.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            applicationsVacancy: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.applicationsVacancy)
                ? object.applicationsVacancy.map(function (e) { return exports.ApplicationVacancy.fromJSON(e); })
                : [],
        };
    },
    toJSON: function (message) {
        var _a;
        var obj = {};
        if ((_a = message.applicationsVacancy) === null || _a === void 0 ? void 0 : _a.length) {
            obj.applicationsVacancy = message.applicationsVacancy.map(function (e) { return exports.ApplicationVacancy.toJSON(e); });
        }
        return obj;
    },
    create: function (base) {
        return exports.GetApplicationsVacancyByVacancyIdRes.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial: function (object) {
        var _a;
        var message = createBaseGetApplicationsVacancyByVacancyIdRes();
        message.applicationsVacancy = ((_a = object.applicationsVacancy) === null || _a === void 0 ? void 0 : _a.map(function (e) { return exports.ApplicationVacancy.fromPartial(e); })) || [];
        return message;
    },
};
exports.ApplicationVacancyServiceServiceName = "pb.ApplicationVacancyService";
var ApplicationVacancyServiceClientImpl = /** @class */ (function () {
    function ApplicationVacancyServiceClientImpl(rpc, opts) {
        this.service = (opts === null || opts === void 0 ? void 0 : opts.service) || exports.ApplicationVacancyServiceServiceName;
        this.rpc = rpc;
        this.CreateApplicationVacancy = this.CreateApplicationVacancy.bind(this);
        this.ReviewApplicationVacancy = this.ReviewApplicationVacancy.bind(this);
        this.AcceptApplicationVacancy = this.AcceptApplicationVacancy.bind(this);
        this.RejectApplicationVacancy = this.RejectApplicationVacancy.bind(this);
        this.GetApplicationVacancyById = this.GetApplicationVacancyById.bind(this);
        this.GetApplicationsVacancyByVacancyId = this.GetApplicationsVacancyByVacancyId.bind(this);
    }
    ApplicationVacancyServiceClientImpl.prototype.CreateApplicationVacancy = function (request) {
        var data = exports.CreateApplicationVacancyReq.encode(request).finish();
        var promise = this.rpc.request(this.service, "CreateApplicationVacancy", data);
        return promise.then(function (data) { return exports.CreateApplicationVacancyRes.decode(new wire_1.BinaryReader(data)); });
    };
    ApplicationVacancyServiceClientImpl.prototype.ReviewApplicationVacancy = function (request) {
        var data = exports.ReviewApplicationVacancyReq.encode(request).finish();
        var promise = this.rpc.request(this.service, "ReviewApplicationVacancy", data);
        return promise.then(function (data) { return empty_js_1.Empty.decode(new wire_1.BinaryReader(data)); });
    };
    ApplicationVacancyServiceClientImpl.prototype.AcceptApplicationVacancy = function (request) {
        var data = exports.AcceptApplicationVacancyReq.encode(request).finish();
        var promise = this.rpc.request(this.service, "AcceptApplicationVacancy", data);
        return promise.then(function (data) { return empty_js_1.Empty.decode(new wire_1.BinaryReader(data)); });
    };
    ApplicationVacancyServiceClientImpl.prototype.RejectApplicationVacancy = function (request) {
        var data = exports.RejectApplicationVacancyReq.encode(request).finish();
        var promise = this.rpc.request(this.service, "RejectApplicationVacancy", data);
        return promise.then(function (data) { return empty_js_1.Empty.decode(new wire_1.BinaryReader(data)); });
    };
    ApplicationVacancyServiceClientImpl.prototype.GetApplicationVacancyById = function (request) {
        var data = exports.GetApplicationVacancyByIdReq.encode(request).finish();
        var promise = this.rpc.request(this.service, "GetApplicationVacancyById", data);
        return promise.then(function (data) { return exports.GetApplicationVacancyByIdRes.decode(new wire_1.BinaryReader(data)); });
    };
    ApplicationVacancyServiceClientImpl.prototype.GetApplicationsVacancyByVacancyId = function (request) {
        var data = exports.GetApplicationsVacancyByVacancyIdReq.encode(request).finish();
        var promise = this.rpc.request(this.service, "GetApplicationsVacancyByVacancyId", data);
        return promise.then(function (data) { return exports.GetApplicationsVacancyByVacancyIdRes.decode(new wire_1.BinaryReader(data)); });
    };
    return ApplicationVacancyServiceClientImpl;
}());
exports.ApplicationVacancyServiceClientImpl = ApplicationVacancyServiceClientImpl;
function isSet(value) {
    return value !== null && value !== undefined;
}
