// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.5
//   protoc               v5.28.2
// source: assets/proto/applicationVacancy/applicationVacancy.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Empty } from "../../../google/protobuf/empty.js";

export const protobufPackage = "pb";

export enum ApplicationVacancyStatus {
  UNREVIEWED = 0,
  REVIEWED = 1,
  ACCEPTED = 2,
  REJECTED = 3,
  UNRECOGNIZED = -1,
}

export function applicationVacancyStatusFromJSON(object: any): ApplicationVacancyStatus {
  switch (object) {
    case 0:
    case "UNREVIEWED":
      return ApplicationVacancyStatus.UNREVIEWED;
    case 1:
    case "REVIEWED":
      return ApplicationVacancyStatus.REVIEWED;
    case 2:
    case "ACCEPTED":
      return ApplicationVacancyStatus.ACCEPTED;
    case 3:
    case "REJECTED":
      return ApplicationVacancyStatus.REJECTED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ApplicationVacancyStatus.UNRECOGNIZED;
  }
}

export function applicationVacancyStatusToJSON(object: ApplicationVacancyStatus): string {
  switch (object) {
    case ApplicationVacancyStatus.UNREVIEWED:
      return "UNREVIEWED";
    case ApplicationVacancyStatus.REVIEWED:
      return "REVIEWED";
    case ApplicationVacancyStatus.ACCEPTED:
      return "ACCEPTED";
    case ApplicationVacancyStatus.REJECTED:
      return "REJECTED";
    case ApplicationVacancyStatus.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface ApplicationVacancy {
  Id: string;
  resumeId: string;
  vacancyId: string;
  status: ApplicationVacancyStatus;
  studentId: string;
}

export interface CreateApplicationVacancyReq {
  resumeId: string;
  vacancyId: string;
  studentId: string;
}

export interface ChangeStatusReq {
  applicationVacancyId: string;
  studentId: string;
}

export interface GetApplicationVacancyByIdReq {
  applicationVacancyId: string;
}

export interface GetApplicationsVacancyByVacancyIdReq {
  vacancyId: string;
  pageSize: number;
  pageToken: string;
}

export interface GetApplicationsVacancyByResumeIdReq {
  resumeId: string;
  pageSize: number;
  pageToken: string;
}

export interface ListApplicationVacancyRes {
  applicationsVacancy: ApplicationVacancy[];
  nextPageToken: string;
}

export interface ApplicationVacancyRes {
  applicationVacancy: ApplicationVacancy | undefined;
}

function createBaseApplicationVacancy(): ApplicationVacancy {
  return { Id: "", resumeId: "", vacancyId: "", status: 0, studentId: "" };
}

export const ApplicationVacancy: MessageFns<ApplicationVacancy> = {
  encode(message: ApplicationVacancy, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.Id !== "") {
      writer.uint32(10).string(message.Id);
    }
    if (message.resumeId !== "") {
      writer.uint32(18).string(message.resumeId);
    }
    if (message.vacancyId !== "") {
      writer.uint32(26).string(message.vacancyId);
    }
    if (message.status !== 0) {
      writer.uint32(32).int32(message.status);
    }
    if (message.studentId !== "") {
      writer.uint32(42).string(message.studentId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ApplicationVacancy {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseApplicationVacancy();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.Id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.resumeId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.vacancyId = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.status = reader.int32() as any;
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.studentId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ApplicationVacancy {
    return {
      Id: isSet(object.Id) ? globalThis.String(object.Id) : "",
      resumeId: isSet(object.resumeId) ? globalThis.String(object.resumeId) : "",
      vacancyId: isSet(object.vacancyId) ? globalThis.String(object.vacancyId) : "",
      status: isSet(object.status) ? applicationVacancyStatusFromJSON(object.status) : 0,
      studentId: isSet(object.studentId) ? globalThis.String(object.studentId) : "",
    };
  },

  toJSON(message: ApplicationVacancy): unknown {
    const obj: any = {};
    if (message.Id !== "") {
      obj.Id = message.Id;
    }
    if (message.resumeId !== "") {
      obj.resumeId = message.resumeId;
    }
    if (message.vacancyId !== "") {
      obj.vacancyId = message.vacancyId;
    }
    if (message.status !== 0) {
      obj.status = applicationVacancyStatusToJSON(message.status);
    }
    if (message.studentId !== "") {
      obj.studentId = message.studentId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ApplicationVacancy>, I>>(base?: I): ApplicationVacancy {
    return ApplicationVacancy.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ApplicationVacancy>, I>>(object: I): ApplicationVacancy {
    const message = createBaseApplicationVacancy();
    message.Id = object.Id ?? "";
    message.resumeId = object.resumeId ?? "";
    message.vacancyId = object.vacancyId ?? "";
    message.status = object.status ?? 0;
    message.studentId = object.studentId ?? "";
    return message;
  },
};

function createBaseCreateApplicationVacancyReq(): CreateApplicationVacancyReq {
  return { resumeId: "", vacancyId: "", studentId: "" };
}

export const CreateApplicationVacancyReq: MessageFns<CreateApplicationVacancyReq> = {
  encode(message: CreateApplicationVacancyReq, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.resumeId !== "") {
      writer.uint32(10).string(message.resumeId);
    }
    if (message.vacancyId !== "") {
      writer.uint32(18).string(message.vacancyId);
    }
    if (message.studentId !== "") {
      writer.uint32(26).string(message.studentId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateApplicationVacancyReq {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateApplicationVacancyReq();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.resumeId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.vacancyId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.studentId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateApplicationVacancyReq {
    return {
      resumeId: isSet(object.resumeId) ? globalThis.String(object.resumeId) : "",
      vacancyId: isSet(object.vacancyId) ? globalThis.String(object.vacancyId) : "",
      studentId: isSet(object.studentId) ? globalThis.String(object.studentId) : "",
    };
  },

  toJSON(message: CreateApplicationVacancyReq): unknown {
    const obj: any = {};
    if (message.resumeId !== "") {
      obj.resumeId = message.resumeId;
    }
    if (message.vacancyId !== "") {
      obj.vacancyId = message.vacancyId;
    }
    if (message.studentId !== "") {
      obj.studentId = message.studentId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreateApplicationVacancyReq>, I>>(base?: I): CreateApplicationVacancyReq {
    return CreateApplicationVacancyReq.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreateApplicationVacancyReq>, I>>(object: I): CreateApplicationVacancyReq {
    const message = createBaseCreateApplicationVacancyReq();
    message.resumeId = object.resumeId ?? "";
    message.vacancyId = object.vacancyId ?? "";
    message.studentId = object.studentId ?? "";
    return message;
  },
};

function createBaseChangeStatusReq(): ChangeStatusReq {
  return { applicationVacancyId: "", studentId: "" };
}

export const ChangeStatusReq: MessageFns<ChangeStatusReq> = {
  encode(message: ChangeStatusReq, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.applicationVacancyId !== "") {
      writer.uint32(10).string(message.applicationVacancyId);
    }
    if (message.studentId !== "") {
      writer.uint32(18).string(message.studentId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ChangeStatusReq {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseChangeStatusReq();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.applicationVacancyId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.studentId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ChangeStatusReq {
    return {
      applicationVacancyId: isSet(object.applicationVacancyId) ? globalThis.String(object.applicationVacancyId) : "",
      studentId: isSet(object.studentId) ? globalThis.String(object.studentId) : "",
    };
  },

  toJSON(message: ChangeStatusReq): unknown {
    const obj: any = {};
    if (message.applicationVacancyId !== "") {
      obj.applicationVacancyId = message.applicationVacancyId;
    }
    if (message.studentId !== "") {
      obj.studentId = message.studentId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ChangeStatusReq>, I>>(base?: I): ChangeStatusReq {
    return ChangeStatusReq.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ChangeStatusReq>, I>>(object: I): ChangeStatusReq {
    const message = createBaseChangeStatusReq();
    message.applicationVacancyId = object.applicationVacancyId ?? "";
    message.studentId = object.studentId ?? "";
    return message;
  },
};

function createBaseGetApplicationVacancyByIdReq(): GetApplicationVacancyByIdReq {
  return { applicationVacancyId: "" };
}

export const GetApplicationVacancyByIdReq: MessageFns<GetApplicationVacancyByIdReq> = {
  encode(message: GetApplicationVacancyByIdReq, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.applicationVacancyId !== "") {
      writer.uint32(10).string(message.applicationVacancyId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetApplicationVacancyByIdReq {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetApplicationVacancyByIdReq();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.applicationVacancyId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetApplicationVacancyByIdReq {
    return {
      applicationVacancyId: isSet(object.applicationVacancyId) ? globalThis.String(object.applicationVacancyId) : "",
    };
  },

  toJSON(message: GetApplicationVacancyByIdReq): unknown {
    const obj: any = {};
    if (message.applicationVacancyId !== "") {
      obj.applicationVacancyId = message.applicationVacancyId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetApplicationVacancyByIdReq>, I>>(base?: I): GetApplicationVacancyByIdReq {
    return GetApplicationVacancyByIdReq.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetApplicationVacancyByIdReq>, I>>(object: I): GetApplicationVacancyByIdReq {
    const message = createBaseGetApplicationVacancyByIdReq();
    message.applicationVacancyId = object.applicationVacancyId ?? "";
    return message;
  },
};

function createBaseGetApplicationsVacancyByVacancyIdReq(): GetApplicationsVacancyByVacancyIdReq {
  return { vacancyId: "", pageSize: 0, pageToken: "" };
}

export const GetApplicationsVacancyByVacancyIdReq: MessageFns<GetApplicationsVacancyByVacancyIdReq> = {
  encode(message: GetApplicationsVacancyByVacancyIdReq, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.vacancyId !== "") {
      writer.uint32(10).string(message.vacancyId);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetApplicationsVacancyByVacancyIdReq {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetApplicationsVacancyByVacancyIdReq();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.vacancyId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetApplicationsVacancyByVacancyIdReq {
    return {
      vacancyId: isSet(object.vacancyId) ? globalThis.String(object.vacancyId) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
    };
  },

  toJSON(message: GetApplicationsVacancyByVacancyIdReq): unknown {
    const obj: any = {};
    if (message.vacancyId !== "") {
      obj.vacancyId = message.vacancyId;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetApplicationsVacancyByVacancyIdReq>, I>>(
    base?: I,
  ): GetApplicationsVacancyByVacancyIdReq {
    return GetApplicationsVacancyByVacancyIdReq.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetApplicationsVacancyByVacancyIdReq>, I>>(
    object: I,
  ): GetApplicationsVacancyByVacancyIdReq {
    const message = createBaseGetApplicationsVacancyByVacancyIdReq();
    message.vacancyId = object.vacancyId ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    return message;
  },
};

function createBaseGetApplicationsVacancyByResumeIdReq(): GetApplicationsVacancyByResumeIdReq {
  return { resumeId: "", pageSize: 0, pageToken: "" };
}

export const GetApplicationsVacancyByResumeIdReq: MessageFns<GetApplicationsVacancyByResumeIdReq> = {
  encode(message: GetApplicationsVacancyByResumeIdReq, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.resumeId !== "") {
      writer.uint32(10).string(message.resumeId);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetApplicationsVacancyByResumeIdReq {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetApplicationsVacancyByResumeIdReq();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.resumeId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetApplicationsVacancyByResumeIdReq {
    return {
      resumeId: isSet(object.resumeId) ? globalThis.String(object.resumeId) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
    };
  },

  toJSON(message: GetApplicationsVacancyByResumeIdReq): unknown {
    const obj: any = {};
    if (message.resumeId !== "") {
      obj.resumeId = message.resumeId;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetApplicationsVacancyByResumeIdReq>, I>>(
    base?: I,
  ): GetApplicationsVacancyByResumeIdReq {
    return GetApplicationsVacancyByResumeIdReq.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetApplicationsVacancyByResumeIdReq>, I>>(
    object: I,
  ): GetApplicationsVacancyByResumeIdReq {
    const message = createBaseGetApplicationsVacancyByResumeIdReq();
    message.resumeId = object.resumeId ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    return message;
  },
};

function createBaseListApplicationVacancyRes(): ListApplicationVacancyRes {
  return { applicationsVacancy: [], nextPageToken: "" };
}

export const ListApplicationVacancyRes: MessageFns<ListApplicationVacancyRes> = {
  encode(message: ListApplicationVacancyRes, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.applicationsVacancy) {
      ApplicationVacancy.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListApplicationVacancyRes {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListApplicationVacancyRes();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.applicationsVacancy.push(ApplicationVacancy.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListApplicationVacancyRes {
    return {
      applicationsVacancy: globalThis.Array.isArray(object?.applicationsVacancy)
        ? object.applicationsVacancy.map((e: any) => ApplicationVacancy.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListApplicationVacancyRes): unknown {
    const obj: any = {};
    if (message.applicationsVacancy?.length) {
      obj.applicationsVacancy = message.applicationsVacancy.map((e) => ApplicationVacancy.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListApplicationVacancyRes>, I>>(base?: I): ListApplicationVacancyRes {
    return ListApplicationVacancyRes.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListApplicationVacancyRes>, I>>(object: I): ListApplicationVacancyRes {
    const message = createBaseListApplicationVacancyRes();
    message.applicationsVacancy = object.applicationsVacancy?.map((e) => ApplicationVacancy.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseApplicationVacancyRes(): ApplicationVacancyRes {
  return { applicationVacancy: undefined };
}

export const ApplicationVacancyRes: MessageFns<ApplicationVacancyRes> = {
  encode(message: ApplicationVacancyRes, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.applicationVacancy !== undefined) {
      ApplicationVacancy.encode(message.applicationVacancy, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ApplicationVacancyRes {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseApplicationVacancyRes();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.applicationVacancy = ApplicationVacancy.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ApplicationVacancyRes {
    return {
      applicationVacancy: isSet(object.applicationVacancy)
        ? ApplicationVacancy.fromJSON(object.applicationVacancy)
        : undefined,
    };
  },

  toJSON(message: ApplicationVacancyRes): unknown {
    const obj: any = {};
    if (message.applicationVacancy !== undefined) {
      obj.applicationVacancy = ApplicationVacancy.toJSON(message.applicationVacancy);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ApplicationVacancyRes>, I>>(base?: I): ApplicationVacancyRes {
    return ApplicationVacancyRes.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ApplicationVacancyRes>, I>>(object: I): ApplicationVacancyRes {
    const message = createBaseApplicationVacancyRes();
    message.applicationVacancy = (object.applicationVacancy !== undefined && object.applicationVacancy !== null)
      ? ApplicationVacancy.fromPartial(object.applicationVacancy)
      : undefined;
    return message;
  },
};

export interface ApplicationVacancyService {
  CreateApplicationVacancy(request: CreateApplicationVacancyReq): Promise<ApplicationVacancyRes>;
  ReviewApplicationVacancy(request: ChangeStatusReq): Promise<Empty>;
  AcceptApplicationVacancy(request: ChangeStatusReq): Promise<Empty>;
  RejectApplicationVacancy(request: ChangeStatusReq): Promise<Empty>;
  GetApplicationVacancyById(request: GetApplicationVacancyByIdReq): Promise<ApplicationVacancyRes>;
  GetApplicationsVacancyByVacancyId(request: GetApplicationsVacancyByVacancyIdReq): Promise<ListApplicationVacancyRes>;
  GetApplicationsVacancyByResumeId(request: GetApplicationsVacancyByResumeIdReq): Promise<ListApplicationVacancyRes>;
}

export const ApplicationVacancyServiceServiceName = "pb.ApplicationVacancyService";
export class ApplicationVacancyServiceClientImpl implements ApplicationVacancyService {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || ApplicationVacancyServiceServiceName;
    this.rpc = rpc;
    this.CreateApplicationVacancy = this.CreateApplicationVacancy.bind(this);
    this.ReviewApplicationVacancy = this.ReviewApplicationVacancy.bind(this);
    this.AcceptApplicationVacancy = this.AcceptApplicationVacancy.bind(this);
    this.RejectApplicationVacancy = this.RejectApplicationVacancy.bind(this);
    this.GetApplicationVacancyById = this.GetApplicationVacancyById.bind(this);
    this.GetApplicationsVacancyByVacancyId = this.GetApplicationsVacancyByVacancyId.bind(this);
    this.GetApplicationsVacancyByResumeId = this.GetApplicationsVacancyByResumeId.bind(this);
  }
  CreateApplicationVacancy(request: CreateApplicationVacancyReq): Promise<ApplicationVacancyRes> {
    const data = CreateApplicationVacancyReq.encode(request).finish();
    const promise = this.rpc.request(this.service, "CreateApplicationVacancy", data);
    return promise.then((data) => ApplicationVacancyRes.decode(new BinaryReader(data)));
  }

  ReviewApplicationVacancy(request: ChangeStatusReq): Promise<Empty> {
    const data = ChangeStatusReq.encode(request).finish();
    const promise = this.rpc.request(this.service, "ReviewApplicationVacancy", data);
    return promise.then((data) => Empty.decode(new BinaryReader(data)));
  }

  AcceptApplicationVacancy(request: ChangeStatusReq): Promise<Empty> {
    const data = ChangeStatusReq.encode(request).finish();
    const promise = this.rpc.request(this.service, "AcceptApplicationVacancy", data);
    return promise.then((data) => Empty.decode(new BinaryReader(data)));
  }

  RejectApplicationVacancy(request: ChangeStatusReq): Promise<Empty> {
    const data = ChangeStatusReq.encode(request).finish();
    const promise = this.rpc.request(this.service, "RejectApplicationVacancy", data);
    return promise.then((data) => Empty.decode(new BinaryReader(data)));
  }

  GetApplicationVacancyById(request: GetApplicationVacancyByIdReq): Promise<ApplicationVacancyRes> {
    const data = GetApplicationVacancyByIdReq.encode(request).finish();
    const promise = this.rpc.request(this.service, "GetApplicationVacancyById", data);
    return promise.then((data) => ApplicationVacancyRes.decode(new BinaryReader(data)));
  }

  GetApplicationsVacancyByVacancyId(request: GetApplicationsVacancyByVacancyIdReq): Promise<ListApplicationVacancyRes> {
    const data = GetApplicationsVacancyByVacancyIdReq.encode(request).finish();
    const promise = this.rpc.request(this.service, "GetApplicationsVacancyByVacancyId", data);
    return promise.then((data) => ListApplicationVacancyRes.decode(new BinaryReader(data)));
  }

  GetApplicationsVacancyByResumeId(request: GetApplicationsVacancyByResumeIdReq): Promise<ListApplicationVacancyRes> {
    const data = GetApplicationsVacancyByResumeIdReq.encode(request).finish();
    const promise = this.rpc.request(this.service, "GetApplicationsVacancyByResumeId", data);
    return promise.then((data) => ListApplicationVacancyRes.decode(new BinaryReader(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
