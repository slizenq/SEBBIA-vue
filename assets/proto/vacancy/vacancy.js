"use strict";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.4
//   protoc               v5.28.2
// source: assets/proto/vacancy/vacancy.proto
Object.defineProperty(exports, "__esModule", { value: true });
exports.VacancyServiceClientImpl = exports.VacancyServiceServiceName = exports.VacancyWithId = exports.GetVacanciesResponse = exports.GetVacanciesByParamsRequest = exports.GetVacancyByIdRequest = exports.VacancyUpdated = exports.VacancyCreated = exports.VacancyResponse = exports.UpdateVacancyRequest = exports.CreateVacancyRequest = exports.Direction = exports.Skill = exports.Vacancy = exports.protobufPackage = void 0;
/* eslint-disable */
var wire_1 = require("@bufbuild/protobuf/wire");
var timestamp_js_1 = require("../../../google/protobuf/timestamp.js");
exports.protobufPackage = "vacancy";
function createBaseVacancy() {
    return { expectedSkills: [], aboutPractice: "", directions: [], aboutProjects: "", companyId: "" };
}
exports.Vacancy = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = new wire_1.BinaryWriter(); }
        for (var _i = 0, _a = message.expectedSkills; _i < _a.length; _i++) {
            var v = _a[_i];
            exports.Skill.encode(v, writer.uint32(10).fork()).join();
        }
        if (message.aboutPractice !== "") {
            writer.uint32(18).string(message.aboutPractice);
        }
        for (var _b = 0, _c = message.directions; _b < _c.length; _b++) {
            var v = _c[_b];
            exports.Direction.encode(v, writer.uint32(26).fork()).join();
        }
        if (message.aboutProjects !== "") {
            writer.uint32(34).string(message.aboutProjects);
        }
        if (message.companyId !== "") {
            writer.uint32(42).string(message.companyId);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseVacancy();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.expectedSkills.push(exports.Skill.decode(reader, reader.uint32()));
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.aboutPractice = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.directions.push(exports.Direction.decode(reader, reader.uint32()));
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.aboutProjects = reader.string();
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.companyId = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            expectedSkills: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.expectedSkills)
                ? object.expectedSkills.map(function (e) { return exports.Skill.fromJSON(e); })
                : [],
            aboutPractice: isSet(object.aboutPractice) ? globalThis.String(object.aboutPractice) : "",
            directions: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.directions)
                ? object.directions.map(function (e) { return exports.Direction.fromJSON(e); })
                : [],
            aboutProjects: isSet(object.aboutProjects) ? globalThis.String(object.aboutProjects) : "",
            companyId: isSet(object.companyId) ? globalThis.String(object.companyId) : "",
        };
    },
    toJSON: function (message) {
        var _a, _b;
        var obj = {};
        if ((_a = message.expectedSkills) === null || _a === void 0 ? void 0 : _a.length) {
            obj.expectedSkills = message.expectedSkills.map(function (e) { return exports.Skill.toJSON(e); });
        }
        if (message.aboutPractice !== "") {
            obj.aboutPractice = message.aboutPractice;
        }
        if ((_b = message.directions) === null || _b === void 0 ? void 0 : _b.length) {
            obj.directions = message.directions.map(function (e) { return exports.Direction.toJSON(e); });
        }
        if (message.aboutProjects !== "") {
            obj.aboutProjects = message.aboutProjects;
        }
        if (message.companyId !== "") {
            obj.companyId = message.companyId;
        }
        return obj;
    },
    create: function (base) {
        return exports.Vacancy.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial: function (object) {
        var _a, _b, _c, _d, _e;
        var message = createBaseVacancy();
        message.expectedSkills = ((_a = object.expectedSkills) === null || _a === void 0 ? void 0 : _a.map(function (e) { return exports.Skill.fromPartial(e); })) || [];
        message.aboutPractice = (_b = object.aboutPractice) !== null && _b !== void 0 ? _b : "";
        message.directions = ((_c = object.directions) === null || _c === void 0 ? void 0 : _c.map(function (e) { return exports.Direction.fromPartial(e); })) || [];
        message.aboutProjects = (_d = object.aboutProjects) !== null && _d !== void 0 ? _d : "";
        message.companyId = (_e = object.companyId) !== null && _e !== void 0 ? _e : "";
        return message;
    },
};
function createBaseSkill() {
    return { skill: "" };
}
exports.Skill = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = new wire_1.BinaryWriter(); }
        if (message.skill !== "") {
            writer.uint32(10).string(message.skill);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseSkill();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.skill = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON: function (object) {
        return { skill: isSet(object.skill) ? globalThis.String(object.skill) : "" };
    },
    toJSON: function (message) {
        var obj = {};
        if (message.skill !== "") {
            obj.skill = message.skill;
        }
        return obj;
    },
    create: function (base) {
        return exports.Skill.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial: function (object) {
        var _a;
        var message = createBaseSkill();
        message.skill = (_a = object.skill) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseDirection() {
    return { direction: "" };
}
exports.Direction = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = new wire_1.BinaryWriter(); }
        if (message.direction !== "") {
            writer.uint32(10).string(message.direction);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseDirection();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.direction = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON: function (object) {
        return { direction: isSet(object.direction) ? globalThis.String(object.direction) : "" };
    },
    toJSON: function (message) {
        var obj = {};
        if (message.direction !== "") {
            obj.direction = message.direction;
        }
        return obj;
    },
    create: function (base) {
        return exports.Direction.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial: function (object) {
        var _a;
        var message = createBaseDirection();
        message.direction = (_a = object.direction) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseCreateVacancyRequest() {
    return { vacancy: undefined };
}
exports.CreateVacancyRequest = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = new wire_1.BinaryWriter(); }
        if (message.vacancy !== undefined) {
            exports.Vacancy.encode(message.vacancy, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseCreateVacancyRequest();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.vacancy = exports.Vacancy.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON: function (object) {
        return { vacancy: isSet(object.vacancy) ? exports.Vacancy.fromJSON(object.vacancy) : undefined };
    },
    toJSON: function (message) {
        var obj = {};
        if (message.vacancy !== undefined) {
            obj.vacancy = exports.Vacancy.toJSON(message.vacancy);
        }
        return obj;
    },
    create: function (base) {
        return exports.CreateVacancyRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial: function (object) {
        var message = createBaseCreateVacancyRequest();
        message.vacancy = (object.vacancy !== undefined && object.vacancy !== null)
            ? exports.Vacancy.fromPartial(object.vacancy)
            : undefined;
        return message;
    },
};
function createBaseUpdateVacancyRequest() {
    return { id: "", vacancy: undefined };
}
exports.UpdateVacancyRequest = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = new wire_1.BinaryWriter(); }
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        if (message.vacancy !== undefined) {
            exports.Vacancy.encode(message.vacancy, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseUpdateVacancyRequest();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.vacancy = exports.Vacancy.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            id: isSet(object.id) ? globalThis.String(object.id) : "",
            vacancy: isSet(object.vacancy) ? exports.Vacancy.fromJSON(object.vacancy) : undefined,
        };
    },
    toJSON: function (message) {
        var obj = {};
        if (message.id !== "") {
            obj.id = message.id;
        }
        if (message.vacancy !== undefined) {
            obj.vacancy = exports.Vacancy.toJSON(message.vacancy);
        }
        return obj;
    },
    create: function (base) {
        return exports.UpdateVacancyRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial: function (object) {
        var _a;
        var message = createBaseUpdateVacancyRequest();
        message.id = (_a = object.id) !== null && _a !== void 0 ? _a : "";
        message.vacancy = (object.vacancy !== undefined && object.vacancy !== null)
            ? exports.Vacancy.fromPartial(object.vacancy)
            : undefined;
        return message;
    },
};
function createBaseVacancyResponse() {
    return { id: "", vacancy: undefined };
}
exports.VacancyResponse = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = new wire_1.BinaryWriter(); }
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        if (message.vacancy !== undefined) {
            exports.Vacancy.encode(message.vacancy, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseVacancyResponse();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.vacancy = exports.Vacancy.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            id: isSet(object.id) ? globalThis.String(object.id) : "",
            vacancy: isSet(object.vacancy) ? exports.Vacancy.fromJSON(object.vacancy) : undefined,
        };
    },
    toJSON: function (message) {
        var obj = {};
        if (message.id !== "") {
            obj.id = message.id;
        }
        if (message.vacancy !== undefined) {
            obj.vacancy = exports.Vacancy.toJSON(message.vacancy);
        }
        return obj;
    },
    create: function (base) {
        return exports.VacancyResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial: function (object) {
        var _a;
        var message = createBaseVacancyResponse();
        message.id = (_a = object.id) !== null && _a !== void 0 ? _a : "";
        message.vacancy = (object.vacancy !== undefined && object.vacancy !== null)
            ? exports.Vacancy.fromPartial(object.vacancy)
            : undefined;
        return message;
    },
};
function createBaseVacancyCreated() {
    return { id: "", vacancy: undefined, timestamp: undefined };
}
exports.VacancyCreated = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = new wire_1.BinaryWriter(); }
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        if (message.vacancy !== undefined) {
            exports.Vacancy.encode(message.vacancy, writer.uint32(18).fork()).join();
        }
        if (message.timestamp !== undefined) {
            timestamp_js_1.Timestamp.encode(toTimestamp(message.timestamp), writer.uint32(26).fork()).join();
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseVacancyCreated();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.vacancy = exports.Vacancy.decode(reader, reader.uint32());
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.timestamp = fromTimestamp(timestamp_js_1.Timestamp.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            id: isSet(object.id) ? globalThis.String(object.id) : "",
            vacancy: isSet(object.vacancy) ? exports.Vacancy.fromJSON(object.vacancy) : undefined,
            timestamp: isSet(object.timestamp) ? fromJsonTimestamp(object.timestamp) : undefined,
        };
    },
    toJSON: function (message) {
        var obj = {};
        if (message.id !== "") {
            obj.id = message.id;
        }
        if (message.vacancy !== undefined) {
            obj.vacancy = exports.Vacancy.toJSON(message.vacancy);
        }
        if (message.timestamp !== undefined) {
            obj.timestamp = message.timestamp.toISOString();
        }
        return obj;
    },
    create: function (base) {
        return exports.VacancyCreated.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial: function (object) {
        var _a, _b;
        var message = createBaseVacancyCreated();
        message.id = (_a = object.id) !== null && _a !== void 0 ? _a : "";
        message.vacancy = (object.vacancy !== undefined && object.vacancy !== null)
            ? exports.Vacancy.fromPartial(object.vacancy)
            : undefined;
        message.timestamp = (_b = object.timestamp) !== null && _b !== void 0 ? _b : undefined;
        return message;
    },
};
function createBaseVacancyUpdated() {
    return { id: "", vacancy: undefined, timestamp: undefined };
}
exports.VacancyUpdated = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = new wire_1.BinaryWriter(); }
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        if (message.vacancy !== undefined) {
            exports.Vacancy.encode(message.vacancy, writer.uint32(18).fork()).join();
        }
        if (message.timestamp !== undefined) {
            timestamp_js_1.Timestamp.encode(toTimestamp(message.timestamp), writer.uint32(26).fork()).join();
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseVacancyUpdated();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.vacancy = exports.Vacancy.decode(reader, reader.uint32());
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.timestamp = fromTimestamp(timestamp_js_1.Timestamp.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            id: isSet(object.id) ? globalThis.String(object.id) : "",
            vacancy: isSet(object.vacancy) ? exports.Vacancy.fromJSON(object.vacancy) : undefined,
            timestamp: isSet(object.timestamp) ? fromJsonTimestamp(object.timestamp) : undefined,
        };
    },
    toJSON: function (message) {
        var obj = {};
        if (message.id !== "") {
            obj.id = message.id;
        }
        if (message.vacancy !== undefined) {
            obj.vacancy = exports.Vacancy.toJSON(message.vacancy);
        }
        if (message.timestamp !== undefined) {
            obj.timestamp = message.timestamp.toISOString();
        }
        return obj;
    },
    create: function (base) {
        return exports.VacancyUpdated.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial: function (object) {
        var _a, _b;
        var message = createBaseVacancyUpdated();
        message.id = (_a = object.id) !== null && _a !== void 0 ? _a : "";
        message.vacancy = (object.vacancy !== undefined && object.vacancy !== null)
            ? exports.Vacancy.fromPartial(object.vacancy)
            : undefined;
        message.timestamp = (_b = object.timestamp) !== null && _b !== void 0 ? _b : undefined;
        return message;
    },
};
function createBaseGetVacancyByIdRequest() {
    return { id: "" };
}
exports.GetVacancyByIdRequest = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = new wire_1.BinaryWriter(); }
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseGetVacancyByIdRequest();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON: function (object) {
        return { id: isSet(object.id) ? globalThis.String(object.id) : "" };
    },
    toJSON: function (message) {
        var obj = {};
        if (message.id !== "") {
            obj.id = message.id;
        }
        return obj;
    },
    create: function (base) {
        return exports.GetVacancyByIdRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial: function (object) {
        var _a;
        var message = createBaseGetVacancyByIdRequest();
        message.id = (_a = object.id) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseGetVacanciesByParamsRequest() {
    return { expectedSkills: [], aboutPractice: "", directions: [], companyId: "" };
}
exports.GetVacanciesByParamsRequest = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = new wire_1.BinaryWriter(); }
        for (var _i = 0, _a = message.expectedSkills; _i < _a.length; _i++) {
            var v = _a[_i];
            exports.Skill.encode(v, writer.uint32(10).fork()).join();
        }
        if (message.aboutPractice !== "") {
            writer.uint32(18).string(message.aboutPractice);
        }
        for (var _b = 0, _c = message.directions; _b < _c.length; _b++) {
            var v = _c[_b];
            exports.Direction.encode(v, writer.uint32(26).fork()).join();
        }
        if (message.companyId !== "") {
            writer.uint32(34).string(message.companyId);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseGetVacanciesByParamsRequest();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.expectedSkills.push(exports.Skill.decode(reader, reader.uint32()));
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.aboutPractice = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.directions.push(exports.Direction.decode(reader, reader.uint32()));
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.companyId = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            expectedSkills: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.expectedSkills)
                ? object.expectedSkills.map(function (e) { return exports.Skill.fromJSON(e); })
                : [],
            aboutPractice: isSet(object.aboutPractice) ? globalThis.String(object.aboutPractice) : "",
            directions: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.directions)
                ? object.directions.map(function (e) { return exports.Direction.fromJSON(e); })
                : [],
            companyId: isSet(object.companyId) ? globalThis.String(object.companyId) : "",
        };
    },
    toJSON: function (message) {
        var _a, _b;
        var obj = {};
        if ((_a = message.expectedSkills) === null || _a === void 0 ? void 0 : _a.length) {
            obj.expectedSkills = message.expectedSkills.map(function (e) { return exports.Skill.toJSON(e); });
        }
        if (message.aboutPractice !== "") {
            obj.aboutPractice = message.aboutPractice;
        }
        if ((_b = message.directions) === null || _b === void 0 ? void 0 : _b.length) {
            obj.directions = message.directions.map(function (e) { return exports.Direction.toJSON(e); });
        }
        if (message.companyId !== "") {
            obj.companyId = message.companyId;
        }
        return obj;
    },
    create: function (base) {
        return exports.GetVacanciesByParamsRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial: function (object) {
        var _a, _b, _c, _d;
        var message = createBaseGetVacanciesByParamsRequest();
        message.expectedSkills = ((_a = object.expectedSkills) === null || _a === void 0 ? void 0 : _a.map(function (e) { return exports.Skill.fromPartial(e); })) || [];
        message.aboutPractice = (_b = object.aboutPractice) !== null && _b !== void 0 ? _b : "";
        message.directions = ((_c = object.directions) === null || _c === void 0 ? void 0 : _c.map(function (e) { return exports.Direction.fromPartial(e); })) || [];
        message.companyId = (_d = object.companyId) !== null && _d !== void 0 ? _d : "";
        return message;
    },
};
function createBaseGetVacanciesResponse() {
    return { vacancies: [] };
}
exports.GetVacanciesResponse = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = new wire_1.BinaryWriter(); }
        for (var _i = 0, _a = message.vacancies; _i < _a.length; _i++) {
            var v = _a[_i];
            exports.VacancyWithId.encode(v, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseGetVacanciesResponse();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.vacancies.push(exports.VacancyWithId.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            vacancies: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.vacancies)
                ? object.vacancies.map(function (e) { return exports.VacancyWithId.fromJSON(e); })
                : [],
        };
    },
    toJSON: function (message) {
        var _a;
        var obj = {};
        if ((_a = message.vacancies) === null || _a === void 0 ? void 0 : _a.length) {
            obj.vacancies = message.vacancies.map(function (e) { return exports.VacancyWithId.toJSON(e); });
        }
        return obj;
    },
    create: function (base) {
        return exports.GetVacanciesResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial: function (object) {
        var _a;
        var message = createBaseGetVacanciesResponse();
        message.vacancies = ((_a = object.vacancies) === null || _a === void 0 ? void 0 : _a.map(function (e) { return exports.VacancyWithId.fromPartial(e); })) || [];
        return message;
    },
};
function createBaseVacancyWithId() {
    return { id: "", expectedSkills: [], aboutPractice: "", directions: [], aboutProjects: "", companyId: "" };
}
exports.VacancyWithId = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = new wire_1.BinaryWriter(); }
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        for (var _i = 0, _a = message.expectedSkills; _i < _a.length; _i++) {
            var v = _a[_i];
            exports.Skill.encode(v, writer.uint32(18).fork()).join();
        }
        if (message.aboutPractice !== "") {
            writer.uint32(26).string(message.aboutPractice);
        }
        for (var _b = 0, _c = message.directions; _b < _c.length; _b++) {
            var v = _c[_b];
            exports.Direction.encode(v, writer.uint32(34).fork()).join();
        }
        if (message.aboutProjects !== "") {
            writer.uint32(42).string(message.aboutProjects);
        }
        if (message.companyId !== "") {
            writer.uint32(50).string(message.companyId);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseVacancyWithId();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.expectedSkills.push(exports.Skill.decode(reader, reader.uint32()));
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.aboutPractice = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.directions.push(exports.Direction.decode(reader, reader.uint32()));
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.aboutProjects = reader.string();
                    continue;
                }
                case 6: {
                    if (tag !== 50) {
                        break;
                    }
                    message.companyId = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            id: isSet(object.id) ? globalThis.String(object.id) : "",
            expectedSkills: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.expectedSkills)
                ? object.expectedSkills.map(function (e) { return exports.Skill.fromJSON(e); })
                : [],
            aboutPractice: isSet(object.aboutPractice) ? globalThis.String(object.aboutPractice) : "",
            directions: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.directions)
                ? object.directions.map(function (e) { return exports.Direction.fromJSON(e); })
                : [],
            aboutProjects: isSet(object.aboutProjects) ? globalThis.String(object.aboutProjects) : "",
            companyId: isSet(object.companyId) ? globalThis.String(object.companyId) : "",
        };
    },
    toJSON: function (message) {
        var _a, _b;
        var obj = {};
        if (message.id !== "") {
            obj.id = message.id;
        }
        if ((_a = message.expectedSkills) === null || _a === void 0 ? void 0 : _a.length) {
            obj.expectedSkills = message.expectedSkills.map(function (e) { return exports.Skill.toJSON(e); });
        }
        if (message.aboutPractice !== "") {
            obj.aboutPractice = message.aboutPractice;
        }
        if ((_b = message.directions) === null || _b === void 0 ? void 0 : _b.length) {
            obj.directions = message.directions.map(function (e) { return exports.Direction.toJSON(e); });
        }
        if (message.aboutProjects !== "") {
            obj.aboutProjects = message.aboutProjects;
        }
        if (message.companyId !== "") {
            obj.companyId = message.companyId;
        }
        return obj;
    },
    create: function (base) {
        return exports.VacancyWithId.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial: function (object) {
        var _a, _b, _c, _d, _e, _f;
        var message = createBaseVacancyWithId();
        message.id = (_a = object.id) !== null && _a !== void 0 ? _a : "";
        message.expectedSkills = ((_b = object.expectedSkills) === null || _b === void 0 ? void 0 : _b.map(function (e) { return exports.Skill.fromPartial(e); })) || [];
        message.aboutPractice = (_c = object.aboutPractice) !== null && _c !== void 0 ? _c : "";
        message.directions = ((_d = object.directions) === null || _d === void 0 ? void 0 : _d.map(function (e) { return exports.Direction.fromPartial(e); })) || [];
        message.aboutProjects = (_e = object.aboutProjects) !== null && _e !== void 0 ? _e : "";
        message.companyId = (_f = object.companyId) !== null && _f !== void 0 ? _f : "";
        return message;
    },
};
exports.VacancyServiceServiceName = "vacancy.VacancyService";
var VacancyServiceClientImpl = /** @class */ (function () {
    function VacancyServiceClientImpl(rpc, opts) {
        this.service = (opts === null || opts === void 0 ? void 0 : opts.service) || exports.VacancyServiceServiceName;
        this.rpc = rpc;
        this.CreateVacancy = this.CreateVacancy.bind(this);
        this.UpdateVacancy = this.UpdateVacancy.bind(this);
        this.GetVacancyById = this.GetVacancyById.bind(this);
        this.GetVacanciesByParams = this.GetVacanciesByParams.bind(this);
    }
    VacancyServiceClientImpl.prototype.CreateVacancy = function (request) {
        var data = exports.CreateVacancyRequest.encode(request).finish();
        var promise = this.rpc.request(this.service, "CreateVacancy", data);
        return promise.then(function (data) { return exports.VacancyResponse.decode(new wire_1.BinaryReader(data)); });
    };
    VacancyServiceClientImpl.prototype.UpdateVacancy = function (request) {
        var data = exports.UpdateVacancyRequest.encode(request).finish();
        var promise = this.rpc.request(this.service, "UpdateVacancy", data);
        return promise.then(function (data) { return exports.VacancyResponse.decode(new wire_1.BinaryReader(data)); });
    };
    VacancyServiceClientImpl.prototype.GetVacancyById = function (request) {
        var data = exports.GetVacancyByIdRequest.encode(request).finish();
        var promise = this.rpc.request(this.service, "GetVacancyById", data);
        return promise.then(function (data) { return exports.VacancyResponse.decode(new wire_1.BinaryReader(data)); });
    };
    VacancyServiceClientImpl.prototype.GetVacanciesByParams = function (request) {
        var data = exports.GetVacanciesByParamsRequest.encode(request).finish();
        var promise = this.rpc.request(this.service, "GetVacanciesByParams", data);
        return promise.then(function (data) { return exports.GetVacanciesResponse.decode(new wire_1.BinaryReader(data)); });
    };
    return VacancyServiceClientImpl;
}());
exports.VacancyServiceClientImpl = VacancyServiceClientImpl;
function toTimestamp(date) {
    var seconds = Math.trunc(date.getTime() / 1000);
    var nanos = (date.getTime() % 1000) * 1000000;
    return { seconds: seconds, nanos: nanos };
}
function fromTimestamp(t) {
    var millis = (t.seconds || 0) * 1000;
    millis += (t.nanos || 0) / 1000000;
    return new globalThis.Date(millis);
}
function fromJsonTimestamp(o) {
    if (o instanceof globalThis.Date) {
        return o;
    }
    else if (typeof o === "string") {
        return new globalThis.Date(o);
    }
    else {
        return fromTimestamp(timestamp_js_1.Timestamp.fromJSON(o));
    }
}
function isSet(value) {
    return value !== null && value !== undefined;
}
